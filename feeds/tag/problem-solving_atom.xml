<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Quantitative Artisan</title><link href="http://www.quantisan.com/" rel="alternate"></link><link href="http://www.quantisan.com/feeds/tag/problem-solving_atom.xml" rel="self"></link><id>http://www.quantisan.com/</id><updated>2014-03-16T00:00:00+00:00</updated><entry><title>More problem solving, less solution glorifying</title><link href="http://www.quantisan.com/more-problem-solving-less-solution-glorifying/" rel="alternate"></link><updated>2014-03-16T00:00:00+00:00</updated><author><name>Paul Lam</name></author><id>tag:www.quantisan.com,2014-03-16:more-problem-solving-less-solution-glorifying/</id><summary type="html">&lt;p&gt;I have been growing fond of this trendy Go programming language lately. We use it at Glassy Media to build services over HTTP and command line. So when we needed a Amazon Mechanical Turk interface I thought why not use Go for that too? I found an existing library in &lt;a href="https://github.com/crowdmob/goamz"&gt;Go for interacting with Amazon Web Services&lt;/a&gt;. But its Mechanical Turk component is incomplete. So I dove into the source code and started patching to make it work.&lt;/p&gt;
&lt;p&gt;A weekend of coding later, I still haven't finished. Then I realised what I was doing. I was building a cool solution but not actually solving the problem at hand. This might have been beneficial for a capable company to help contribute back to the open source community. But not where I'm at -- a new startup that's stretching thin on resources. We simply couldn't afford to lose focus at this phase. So I switched over to good ole Python. The &lt;a href="https://github.com/boto/boto"&gt;boto&lt;/a&gt; Python interface to AWS worked just fine. The result was that there were no "I did this in Go" blog post to write about but our problem was solved and we moved on to the next task.&lt;/p&gt;
&lt;p&gt;This sense of building cool solutions just for the sake of it seem common in tech. Just last week at a Go meetup, someone spoke about Using Reflections in Go. Even Rob Pike, the man himself, wrote that reflection "should be used with care and avoided unless strictly necessary". Somehow that was taken as a challenge.&lt;/p&gt;
&lt;p&gt;&lt;img alt="challenge accepted" src="http://www.quantisan.com/images/2014/200px-challenge-acepted.png" /&gt;&lt;/p&gt;
&lt;p&gt;I am guilty of glorifying new technologies and putting down on tried and true solutions too. On more occasions than I dare to admit at data conferences, I participated in bashing at SQL databases with the attendees. I can't speak for others, but for me it was due to ignorance. I used SQL a few times before but was put off by the data warehousing aspect of it. Having gotten more familiar with MySQL in particular over the past couple years, SQL can be simple and beautiful too. I have actually come to prefer it in some cases. Use the right tool for the right task, right?&lt;/p&gt;
&lt;p&gt;An example of focusing on solving the problem. Here is one of the distilled tech specs we have for a component.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A webpage for users to view a dataset of their private contacts&lt;/li&gt;
&lt;li&gt;Sorting capabilities on some of the data fields&lt;/li&gt;
&lt;li&gt;Expected number of contacts per user is several hundreds&lt;/li&gt;
&lt;li&gt;Limit to no more than 10 - 20 users at beta launch&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Most of the efforts went into distilling our problem to make it as easy as possible. Like letting the user edit the data? Nope. UX design? Not until we figure out what data to surface. Because the problem specs are concise, solving this is almost trivial. Our current technical stack to solve this is embarassingly simplistic:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML/CSS/Javascript for front end hosted on Heroku,&lt;/li&gt;
&lt;li&gt;Go for REST-based backend on Heroku; and&lt;/li&gt;
&lt;li&gt;Google Spreadsheet as database.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nothing fancy. Yes, we didn't even bother with spinning up a database.&lt;/p&gt;
&lt;p&gt;People build more complicated things in a hackday than this. That's because the real problem we have is that we &lt;em&gt;think&lt;/em&gt; this is needed with no real proof yet. Perhaps all they need is just having CSV files emailed to them? We tried that too. We want to get this out to our customers as soon as possible for them to use and give us feedback. What is the task that this component is doing for our customers in the scope of our product experience? Abstract problems like these are not trivial and validating them is why we are building things in a startup. Not the other way around.&lt;/p&gt;
&lt;p&gt;As I was reminiscing earlier this year, effective problem solving is more about &lt;a href="/what-i-learned-from-2-years-of-data-sciencing/"&gt;defining a clear problem than coming up with a smart solution&lt;/a&gt;. "A problem well stated is a problem half-solved." In a pursuit of the latest and greatest, I sometimes find myself swung too far in the pendulum towards &lt;a href="/event-driven-finite-state-machine-for-a-distributed-trading-system/"&gt;glorifying the solution&lt;/a&gt; rather than appreciating the effectiveness of clarifying the problem. Sometimes the best solution is to realise &lt;em&gt;not&lt;/em&gt; to do something.&lt;/p&gt;
&lt;p&gt;At this early stage of our startup, the biggest problem should clearly be shipping and learning. Being a Clojure enthusiast myself, we've only used Clojure for 2 of the dozen or so of projects shipped. Most of the rest are a mix of Python, Go, Javascript, Bash scripts, or even Google Doc macros. However, don't mistaken getting things done quickly with cutting corners or committing spaghetti code.  We are adament about keeping our software architecture as simple and decoupled as possible. If that's done right, the individual implementation don't matter because we can always rewrite any of them without impacting the system. That Mechanical Turk project? You can bet that we'll come back to refactor it later if it proves useful. Maybe we'll pick up on goamz again. But at least it's shipped now. I am focusing on the problem and not let building a startup become a technical challenge to satisfy my vanity.&lt;/p&gt;</summary><category term="problem solving"></category></entry></feed>