<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Paul Lam</title><link href="http://www.quantisan.com/" rel="alternate"></link><link href="http://www.quantisan.com/feeds/tag/software-design_atom.xml" rel="self"></link><id>http://www.quantisan.com/</id><updated>2011-10-25T15:28:00-04:00</updated><entry><title>Eureka moment on design patterns for functional programming</title><link href="http://www.quantisan.com/eureka-moment-on-design-patterns-for-functional-programming/" rel="alternate"></link><updated>2011-10-25T15:28:00-04:00</updated><author><name>Paul Lam</name></author><id>tag:www.quantisan.com,2011-10-25:eureka-moment-on-design-patterns-for-functional-programming/</id><summary type="html">&lt;p&gt;Understanding design patterns for object-oriented programming made my
life easier as a Java programmer. So I have been looking for a
comparable book for functional programming ever since my sojourn into
this age-old paradigm. It looks as though &lt;a href="http://stackoverflow.com/questions/2930277/functional-programming-equivalent-of-design-patterns-book"&gt;I'm not the only one
looking&lt;/a&gt; too. But the thing is, I think I've just had a revelation of
sort.&lt;/p&gt;
&lt;p&gt;There is one and only one guideline to designing functional
architectures -- Keep it simple. Simple as in keeping your functions
having a single purpose only. Simple as in work with the data directly and
don't conjure unnecessary intermediaries. Simple, as elaborated by Rich
Hickey in his talk, &lt;a href="http://www.infoq.com/presentations/Simple-Made-Easy"&gt;Simple Made Easy&lt;/a&gt;. Much of this is conveyed in Bloch's Effective Java:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="err"&gt;\#&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="err"&gt;\–&lt;/span&gt; &lt;span class="n"&gt;Avoid&lt;/span&gt; &lt;span class="n"&gt;creating&lt;/span&gt; &lt;span class="n"&gt;unnecessary&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt;
&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="err"&gt;\#&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="err"&gt;\–&lt;/span&gt; &lt;span class="n"&gt;minimize&lt;/span&gt; &lt;span class="n"&gt;accessibility&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;classes&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;members&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;, for examples.&lt;/p&gt;
&lt;p&gt;As &lt;a href="http://stackoverflow.com/questions/2930277/functional-programming-equivalent-of-design-patterns-book/2930452#2930452"&gt;Majewski said in a stackoverflow reply&lt;/a&gt; (Update 2013 – question no longer available on stackoverflow),&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt; &lt;span class="n"&gt;movement&lt;/span&gt; &lt;span class="n"&gt;started&lt;/span&gt; &lt;span class="n"&gt;because&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;oriented&lt;/span&gt; &lt;span class="n"&gt;programming&lt;/span&gt; 
&lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;often&lt;/span&gt; &lt;span class="n"&gt;turning&lt;/span&gt; &lt;span class="n"&gt;into&lt;/span&gt; &lt;span class="n"&gt;spaghetti&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;Functional&lt;/span&gt; &lt;span class="n"&gt;programming&lt;/span&gt; 
&lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;restricted&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;programming&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;didn&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;need&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;grow&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt;
&lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="k"&gt;restricted&lt;/span&gt; &lt;span class="n"&gt;conventions&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;chaos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As such, there is no design pattern book for functional programming. I didn't get that earlier this year. But something clicked recently. During the past few months, I've been doing some &lt;a href="http://www.quantisan.com/ive-quit-my-day-job-and-moved-to-the-uk-to-do-this-full-time/"&gt;consulting and open source projects&lt;/a&gt; solving algorithmic problems with Clojure.&lt;/p&gt;
&lt;p&gt;One of the problems in a project that I was faced with this week is calculating the occurrence of each distinctive element within a list of elements. Say we have a list, &lt;code&gt;coll = ("orange", "bottle", "coke", "bottle")&lt;/code&gt;. The output would be something like &lt;code&gt;[("orange", "bottle", "coke") (1 2 1)]&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;This is my first solution.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;eval-decompose&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;coll&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;super-d&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;distinct &lt;/span&gt;&lt;span class="nv"&gt;coll&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;freqs&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;loop &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;ps&lt;/span&gt;  &lt;span class="p"&gt;[]&lt;/span&gt;
                        &lt;span class="nv"&gt;d&lt;/span&gt;   &lt;span class="nv"&gt;super-d&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;seq &lt;/span&gt;&lt;span class="nv"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;partial = &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;first &lt;/span&gt;&lt;span class="nv"&gt;d&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nv"&gt;coll&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
                       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;recur&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;conj &lt;/span&gt;&lt;span class="nv"&gt;ps&lt;/span&gt; &lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;rest &lt;/span&gt;&lt;span class="nv"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
                     &lt;span class="nv"&gt;ps&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;vector &lt;/span&gt;&lt;span class="nv"&gt;%1&lt;/span&gt; &lt;span class="nv"&gt;%2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;super-d&lt;/span&gt; &lt;span class="nv"&gt;freqs&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The specs are not exactly as I described but the concept remains. What I
did is to use tail calls (it's supposed to be fast, isn't it?) to
aggregate each counter to produce a vector of counts. Then I map each
pair of fragment with its corresponding count to generate a final output
collection. Sounds overly complicated, doesn't it?&lt;/p&gt;
&lt;p&gt;This is the first warning of a bad functional design. For a collection of 30,000 items,
this function took 11 minutes to compute on my notebook. This looks like
a good place to exploit the parallel nature of this problem.&lt;/p&gt;
&lt;p&gt;Specifically, the counting of each fragment is independent of other
fragments. Thus, there's no need for the program to wait for one
fragment to finish to process the next. I simplified the program to
remove this inherent assumption of procedural processing. Here is the
gist of the refactored code where each function only does one job. Since
the processing are modularised, I can parallelize the algorithm easily
with the use of pmap instead of map on the last line as shown below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;match-count&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot; Given key, k, returns number of occurrences of k in collection, coll.&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;k&lt;/span&gt; &lt;span class="nv"&gt;coll&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;match?&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="nv"&gt;k&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;;; closure on k&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;inc &lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reduce &lt;/span&gt;&lt;span class="nv"&gt;match?&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;coll&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;calc-counts&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot; Returns a list of counts for the occurrences of each key of keys, ks,&lt;/span&gt;
&lt;span class="s"&gt;  within the collection, coll.&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;ks&lt;/span&gt; &lt;span class="nv"&gt;coll&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;pmap&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;match-count&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="nv"&gt;coll&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;ks&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I've split the first function into 3 functions (2 shown here). As Hickey
said in his talk, simplifying can often produce more, not less,
functions. Yet, the program is not only easier to read and runs in less
than a minute. An order of magnitude faster! There are still lots for me
to learn. I want to find more challenging projects to push my own
limits. But rather than solving arbitrary problems, I prefer to tackle
real-world challenges. So if you know of anyone that can benefit from
collaborating with a functional developer to build robust and scalable
software, please pass along &lt;a href="mailto:paul@quantisan.com"&gt;my contact&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Follow up: Kevin Lynagh showed me three better ways of doing this in a follow-up post – &lt;a href="/algorithmic-ownage/"&gt;Algorithmimc ownage&lt;/a&gt;. Humbled.&lt;/p&gt;</summary><category term="clojure"></category><category term="software design"></category></entry><entry><title>Software design, trading development process, and Ikea</title><link href="http://www.quantisan.com/software-design-trading-development-process-and-ikea/" rel="alternate"></link><updated>2011-04-12T07:30:00-04:00</updated><author><name>Paul Lam</name></author><id>tag:www.quantisan.com,2011-04-12:software-design-trading-development-process-and-ikea/</id><summary type="html">&lt;p&gt;I spent a few months between 2010 and 2011 not on the market, not on
coming up with new strategies, but on developing a software framework
for my trading system. For my trading strategy development, I make use
of a continuous systems development life cycle process from the
engineering realm. Starting from planning, to analysis, to design, to
implementation, to maintenance, and finally, back to planning, and so on
for each and every new concept that I have. (see &lt;a href="http://www.wired.com/epicenter/2011/04/in-praise-of-failure/all/1"&gt;Sir James Dyson's
guest column on Wired&lt;/a&gt;) Imagine that if you need to write a new
strategy file for each and every idea and for each of its design
iteration. Pretty soon you'll have many strategy files and a lot of
boilerplate codes. What if you found a bug or figured out some
enhancements to a particular component of your strategy? Then you'll
have to sift through all those files and make the changes to all those
relevant codes to make the update across the board. Hopefully, this
isn't the approach you're taking. Yet, a few trading API that I have
used before inherently encourage or even limit you (&lt;a href="http://www.quantisan.com/why-i-am-not-a-big-fan-of-mql4-or-trading-platform-scripting/"&gt;EasyLanguage and
MQL4&lt;/a&gt;) to this archaic procedural programming paradigm. Luckily, Java
is an object-oriented programming language. However, it is only as
object-oriented as you make it to be. JForex, &lt;a href="http://www.quantisan.com/tag/jforex"&gt;the trading API that I
use&lt;/a&gt;, actually runs on &lt;a href="http://www.quantisan.com/more-trouble-with-jforex-iindicators/"&gt;the edge of breaking this
object-orientedness&lt;/a&gt; as I have recently lamented. The bad news for the
beginning developer is that practically every published strategy which I
have seen or &lt;a href="http://www.quantisan.com/tag/source-code/"&gt;guilty of posting myself&lt;/a&gt; are illustrations of what not
to do with software design. In that there's none in it whatsoever. Think
of common published strategies like the Ikea mini-model showrooms.
Everything is crammed into a tiny space but it is a simple way to convey
the gist of a room design (read: the trading algorithm). However, they
are not built for practical use. Real strategies are like suites in an
apartment building. There is an underlying architectural commonality for
easy management and maintenance while enabling diversity in the
strategies. My recently completed software framework dramatically made
my life easier in the tasks of implementation and maintenance. Software
maintenance, in particular, is most often needlessly and overly
complicated in trading strategy development because of the lack of a
good design. Because at the end of the day, most programmers spend the
majority of their time debugging, maintaining, and extending their code.
A true object-oriented design decouples all its components so that you
can use a divide and conquer approach with no repetition of work. Do you
have a development process in place? I'd like to hear how you tackle
this problem.&lt;/p&gt;</summary><category term="development"></category><category term="software design"></category></entry><entry><title>More trouble with JForex IIndicators</title><link href="http://www.quantisan.com/more-trouble-with-jforex-iindicators/" rel="alternate"></link><updated>2011-03-29T07:36:00-04:00</updated><author><name>Paul Lam</name></author><id>tag:www.quantisan.com,2011-03-29:more-trouble-with-jforex-iindicators/</id><summary type="html">&lt;p&gt;JFUtil offers [an elegant way of requesting indicators from the JForex
IIndicators interface][]. But the new design for JForex IIndicators
through JFUtil is only fixing one side of the problem. There is still
the question of what to do with the multiple return types from the
calculations. In JForex, indicators like RSI returns a one-dimensional
array. Other indicators like Stochastic Oscillator returns a
two-dimensional array. And some other ones return three or more
dimensional arrays. Java doesn't allow overloading a method with
multiple return types, as the program wouldn't know what to expect. So
how can we get rid of coding mess like this in our JForex strategy?
[java] Stochastic stochBean = IndicatorBeanFactory.getStochastic();
Object[] objs = Indicating.calculateMultiDimension(instrument,
Period.ONE_MIN, stochBean, 1); double[][] sto = new double[2][]; sto[0]
= (double[])objs[0]; // %K values sto[1] = (double[])objs[1]; // %D
values [/java] The default calculation method in JForex returns a
generic Object array. It's up to the programmer to know what to expect
from the call and cast the Object into something useful. Obviously, this
is a recipe for programming headaches and runtime errors. Having said
this, one of the biggest benefits of JForex is that it uses a standard
programming language like Java. So if there's something that you don't
like about the API, you can probably change it (e.g. Facade pattern).
This is the purpose of JFUtil to some extent, to &lt;a href="http://www.quantisan.com/jfutil-an-open-source-jforex-utilities-library/"&gt;simplify the JForex
API behaviour&lt;/a&gt;. In any case, I'm sure other Java programmers have
faced this problem before and have come up with good solutions for it. A
search on stackoverflow.com doesn't yield a quick fix solution at first
glimpse. My guess is that this require leveraging the knowledge about
the program structure. We know in advance what dimension of the
calculation result we can expect based on the indicator itself, perhaps
I can use something like a Command pattern to choose a calculation
sub-routine and then return a Map object with named values? I have yet
to try implementing this. I am open to design suggestions to encapsulate
multiple return values through a single interface. So that any indicator
bean can use the same calculation interface with an easy to use output.
In the mean time, getting multi-dimensional indicators results through
&lt;a href="http://www.quantisan.com/jfutil-an-open-source-jforex-utilities-library/"&gt;JFUtil 2.1.2&lt;/a&gt; isn't pretty.&lt;/p&gt;
&lt;p&gt;[an elegant way of requesting indicators from the JForex IIndicators
  interface]: http://www.quantisan.com/conjuring-beans-to-simplify-jforex-iindicators/&lt;/p&gt;</summary><category term="JForex"></category><category term="JFUtil"></category><category term="software design"></category></entry><entry><title>Conjuring beans to simplify JForex IIndicators</title><link href="http://www.quantisan.com/conjuring-beans-to-simplify-jforex-iindicators/" rel="alternate"></link><updated>2011-03-22T07:35:00-04:00</updated><author><name>Paul Lam</name></author><id>tag:www.quantisan.com,2011-03-22:conjuring-beans-to-simplify-jforex-iindicators/</id><summary type="html">&lt;p&gt;The JForex API is not perfect. Like any application programming
interface (API), some parts of the JForex API is better designed than
others. One of the most gripping problems with JForex is its use of
technical analysis (TA) indicators. Here's an example of using an
exponential moving average, one of the most simplest indicators.
&lt;code&gt;ema(instrument, Period.TEN_SECS, OfferSide.BID, IIndicators.AppliedPrice.MEDIAN_PRICE, 14, 0);&lt;/code&gt;
And the corresponding javadoc explaining the parameters,
&lt;code&gt;Parameters: instrument instrument of the bar period period of the bar side bid or ask side of the bar appliedPrice type of input data timePeriod time period value shift number of candle back in time staring from current bar. 0 - current bar (currently generated from ticks), 1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on&lt;/code&gt;
It's not intuitive but it's usable. Recall that in my &lt;a href="http://www.quantisan.com/getting-started-learning-jforex-programming/"&gt;JForex
programming tutorial&lt;/a&gt;, I suggested using the JForex API javadoc to
find out information about the API. However, for the case of
IIndicators, if you &lt;a href="http://www.dukascopy.com/client/javadoc/com/dukascopy/api/IIndicators.html"&gt;take a look at its javadoc&lt;/a&gt;, you will only be led
to more confusion by the hundred or so mysterious indicator methods with
cryptic parameter names. In JForex API, if you want to calculate an
indicator, you need to look through a long list of abbreviated method
names in the javadoc. Many of which are not easy to decipher. Secondly,
you need to figure out the generic parameters and set them correctly,
which is different for almost every indicator. Lastly, as there is no
standard interface for indicators, you need to hardcode these into your
strategy with little flexibility. In contrast, here's the same call
using &lt;a href="http://www.quantisan.com/jfutil-an-open-source-jforex-utilities-library/"&gt;JFUtil 2.1.0&lt;/a&gt; to get an EMA value. It has notably more lines of
code. It is designed deliberately so using an object oriented approach
by encapsulating the indicator parameters into a bean object and
abstracting the calculation into a single generic function call. [java]
// get an EMA indicator value by building an indicator bean
MovingAverage maBean = IndicatorBeanFactory.getMovingAverage(); // then
sets its parameters with obvious method names
maBean.setAppliedPrice(IIndicators.AppliedPrice.MEDIAN_PRICE)
.setMAType(IIndicators.MaType.EMA) .setWidth(14); // all of these are
optional parameters // feed the bean into a generic calculation method
to get the result double ema = Indicating.calculate(instrument,
Period.ONE_MIN, maBean); [/java] With JFUtil, to calculate an
indicator, you create an indicator bean with the intuitive bean name
that corresponds with the full name of an indicator. For example, a
moving average will be MovingAverage. Then you set the
indicator-specific parameters using clearly defined methods with useful
javadoc descriptions. One method for one parameter. Lastly, you feed
this indicator bean into a generic calculation function to get your
value. It took some thinking to abstract and generalize such a rigidly
structured API. I am quite pleased with this new design as the current
&lt;a href="http://www.quantisan.com/jfutil-an-open-source-jforex-utilities-library/"&gt;JFUtil opens up a lot of design flexibility&lt;/a&gt;. Such as
dynamic indicator selection with genetic algorithm and interchangeable
indicators use for runtime adaptive algorithms.&lt;/p&gt;</summary><category term="JForex"></category><category term="JFUtil"></category><category term="software design"></category></entry></feed>