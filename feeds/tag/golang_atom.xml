<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Quantitative Artisan</title><link href="http://www.quantisan.com/" rel="alternate"></link><link href="http://www.quantisan.com/feeds/tag/golang_atom.xml" rel="self"></link><id>http://www.quantisan.com/</id><updated>2014-05-12T00:00:00+01:00</updated><entry><title>Simple, Easy, Quick: Using Go along with Clojure</title><link href="http://www.quantisan.com/simple-easy-quick-using-go-along-with-clojure/" rel="alternate"></link><updated>2014-05-12T00:00:00+01:00</updated><author><name>Paul Lam</name></author><id>tag:www.quantisan.com,2014-05-12:simple-easy-quick-using-go-along-with-clojure/</id><summary type="html">&lt;p&gt;We had questions about how Go compares with Clojure at the Boston Clojure Meetup this week. My default answer to any technology this-vs-that debate is -- &lt;em&gt;it depends&lt;/em&gt;. But it just so happens that our backend system at Glassy Media consist of an even split of services written between Go and Clojure. However, this isn't due to any technical reasoning. Using the two languages together feels right to our particular needs.&lt;/p&gt;
&lt;p&gt;Rich Hickey made clear the distinction between simple and easy in his famous talk, &lt;a href="http://www.infoq.com/presentations/Simple-Made-Easy"&gt;Simple Made Easy&lt;/a&gt;. Clojure made simple easy. But sometimes I don't want simple and easy. I want quick and easy. That is exactly where Go can complement Clojure.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Simple, Easy, Quick" src="http://www.quantisan.com/images/2014/simple_easy_quick_triangle.png" /&gt;&lt;/p&gt;
&lt;p&gt;How Clojure made simple easy has been a path well beaten. The rest of this post is why I think Go is quick and easy.&lt;/p&gt;
&lt;h2&gt;Our Path To Go&lt;/h2&gt;
&lt;p&gt;Once upon a time (i.e. a few months ago) our backend cogs and gears consisted of a bunch of command line programs that we would run on our laptop every now and then to churn our data. We distributed those tools to our non-developer helpers to serve our clients. Those command line tools started out in Python or Node.js. But distributing, maintaining, and updating those programs to other people's laptops eventually became a real pain. So one weekend I rewrote one of our command line programs in Go. On Monday I shared a link to a single executable file on Dropbox and people were able to run it directly from there. No more asking people to go on command line and typing &lt;code&gt;pip install&lt;/code&gt; or &lt;code&gt;npm install&lt;/code&gt;. That was how we started using Go at Glassy Media.&lt;/p&gt;
&lt;p&gt;I had no prior experience with Go before that. The fact that I was able to learn the language and then produce something useful over a weekend doesn't have to do with me. It is the practicality of the language, clear documentation, and smart tooling that makes Go easy to ramp up.&lt;/p&gt;
&lt;h3&gt;Language Practicality&lt;/h3&gt;
&lt;p&gt;Take the &lt;code&gt;for&lt;/code&gt; loop as an example, you can iterate over a map like so. (code sample taken from &lt;a href="http://golang.org/doc/effective_go.html#for"&gt;Effective Go&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;oldMap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;newMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The same &lt;code&gt;range&lt;/code&gt; can be used to iterate over an array:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No need for additional syntax to do the same thing. And there're no &lt;code&gt;while&lt;/code&gt; or &lt;code&gt;do&lt;/code&gt; loops too. There is only &lt;code&gt;for&lt;/code&gt; to do all of that as shown.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// complete `for` struct&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// only check condition like a `while`&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;condition&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// or, nothing like a `do`&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Go core syntax is consistently minimal like so.&lt;/p&gt;
&lt;h3&gt;Clear Documentation&lt;/h3&gt;
&lt;p&gt;From &lt;a href="http://blog.golang.org/godoc-documenting-go-code"&gt;The Go Programming Language&lt;/a&gt;,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Go&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="n"&gt;takes&lt;/span&gt; &lt;span class="n"&gt;documentation&lt;/span&gt; &lt;span class="n"&gt;seriously&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Documentation&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;huge&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt;
 &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;making&lt;/span&gt; &lt;span class="n"&gt;software&lt;/span&gt; &lt;span class="n"&gt;accessible&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;maintainable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Of&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;must&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt;
 &lt;span class="n"&gt;well&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;written&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;accurate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="n"&gt;must&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;easy&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;write&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;
 &lt;span class="n"&gt;maintain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Ideally&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;coupled&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;itself&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt;
 &lt;span class="n"&gt;documentation&lt;/span&gt; &lt;span class="n"&gt;evolves&lt;/span&gt; &lt;span class="n"&gt;along&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;easier&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;
 &lt;span class="n"&gt;programmers&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;produce&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="n"&gt;documentation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;everyone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Go's source code documentation has simple convention and automatic publishing. Take our trivial &lt;a href="https://github.com/GlassyMedia/go-arrays"&gt;go-arrays library for manipulating arrays&lt;/a&gt;. Here is one of the functions and its docstring.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Contains check if &amp;#39;s&amp;#39; is in &amp;#39;coll&amp;#39; string array&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;coll&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What's amazing is that a corresponding project documentation page is automatically scraped from our source code and hosted on GoDoc.org with no extra work needed on our part. So as soon as you pushed a project onto Github, you can request your project documentation on GoDoc.org website. Here is a screenshot of one.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Godoc.org for go-arrays" src="http://www.quantisan.com/images/2014/godoc_screen.png" /&gt;&lt;/p&gt;
&lt;p&gt;Because software documentation is baked into the process, I find most of the Go libraries are less frustrating to pickup.&lt;/p&gt;
&lt;h3&gt;Smart Tooling&lt;/h3&gt;
&lt;p&gt;I don't know why GoFmt isn't more common in programming. GoFmt is a tool that automatically &lt;a href="http://golang.org/cmd/gofmt/"&gt;formats Go source code&lt;/a&gt;. It is like &lt;code&gt;jshint&lt;/code&gt; or &lt;code&gt;pyflakes&lt;/code&gt; but goes an extra step further and actually fixes your code styling for you too. No more &lt;code&gt;gg=G&lt;/code&gt; in Vim.&lt;/p&gt;
&lt;p&gt;Consistent source code styling makes life so much easier when digging into other people's projects.&lt;/p&gt;
&lt;p&gt;Overall, I enjoy the workflow developing in Go. There is no interactive REPL. What you get is an almost instant &lt;code&gt;go test&lt;/code&gt; and &lt;code&gt;go run&lt;/code&gt; execution time. Coming from doing everything in Vim, switching between my editor and the command line isn't as annoying as I would have thought.&lt;/p&gt;
&lt;p&gt;One reason for that is because the workflow is different when developing in Go. GoFmt is integrated in Vim (and other typical editors); along with the fact that Go is statically typed, by the time when your code saves without error, most of the time it would work as expected. So it's not that often when I need to resort to doing &lt;code&gt;go test&lt;/code&gt; to check my code.&lt;/p&gt;
&lt;h3&gt;Go for Web Services&lt;/h3&gt;
&lt;p&gt;Having had Go in production for only a few months, our experience with Go is limited. Still, what stands out the most with Go is using it to build web services. Take our SMTP callback verification service, for example. The HTTP server code for it is &lt;a href="https://github.com/GlassyMedia/smtp-callback-verification/blob/master/web.go"&gt;under 50 lines&lt;/a&gt; using &lt;a href="https://github.com/ant0ine/go-json-rest"&gt;go-json-rest&lt;/a&gt; and a couple core packages. Not only that, Go has &lt;a href="https://github.com/GlassyMedia/smtp-callback-verification/blob/master/web_test.go"&gt;mock HTTP server testing functionality built right in&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I am aware that this is subjective. But having used a handful of languages and frameworks to build RESTful web services, Go is by far the easiest to get a server up and running.&lt;/p&gt;
&lt;h2&gt;Complementing Clojure with Go&lt;/h2&gt;
&lt;p&gt;The one time when I had to choose between Go vs. Clojure was when the Boston Go Meetup happened on the same night as the Boston Clojure Meetup.&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;.&lt;a href="https://twitter.com/BostonGolang"&gt;@bostongolang&lt;/a&gt; hmm... didn&amp;#39;t think I&amp;#39;ll have to take side Clojure vs. Go so soon&lt;/p&gt;&amp;mdash; Paul Lam (@quantisan) &lt;a href="https://twitter.com/quantisan/statuses/446389305972621312"&gt;March 19, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;Otherwise, there is no reason that Go and Clojure can't work along each other as part of a suite of toolset.&lt;/p&gt;
&lt;p&gt;Everyone has their tools of choice. Your taste and circumstance are probably different than mine. What matters is that the tools in your toolbox as a whole fit the problems that you face. Go and Clojure fill different needs for us.&lt;/p&gt;</summary><category term="golang"></category><category term="clojure"></category></entry><entry><title>More problem solving, less solution glorifying</title><link href="http://www.quantisan.com/more-problem-solving-less-solution-glorifying/" rel="alternate"></link><updated>2014-03-16T00:00:00+00:00</updated><author><name>Paul Lam</name></author><id>tag:www.quantisan.com,2014-03-16:more-problem-solving-less-solution-glorifying/</id><summary type="html">&lt;p&gt;I have been growing fond of this trendy Go programming language lately. We use it at Glassy Media to build services over HTTP and command line. So when we needed a Amazon Mechanical Turk interface I thought why not use Go for that too? I found an existing library in &lt;a href="https://github.com/crowdmob/goamz"&gt;Go for interacting with Amazon Web Services&lt;/a&gt;. But its Mechanical Turk component is incomplete. So I dove into the source code and started patching to make it work.&lt;/p&gt;
&lt;p&gt;A weekend of coding later, I still haven't finished. Then I realised what I was doing. I was building a cool solution but not actually solving the problem at hand. This might have been beneficial for a capable company to help contribute back to the open source community. But not where I'm at -- a new startup that's stretching thin on resources. We simply couldn't afford to lose focus at this phase. So I switched over to good ole Python. The &lt;a href="https://github.com/boto/boto"&gt;boto&lt;/a&gt; Python interface to AWS worked just fine. The result was that there were no "I did this in Go" blog post to write about but our problem was solved and we moved on to the next task.&lt;/p&gt;
&lt;p&gt;This sense of building cool solutions just for the sake of it seem common in tech. Just last week at a Go meetup, someone spoke about Using Reflections in Go. Even Rob Pike, the man himself, wrote that reflection "should be used with care and avoided unless strictly necessary". Somehow that was taken as a challenge.&lt;/p&gt;
&lt;p&gt;&lt;img alt="challenge accepted" src="http://www.quantisan.com/images/2014/200px-challenge-acepted.png" /&gt;&lt;/p&gt;
&lt;p&gt;I am guilty of glorifying new technologies and putting down on tried and true solutions too. On more occasions than I dare to admit at data conferences, I participated in bashing at SQL databases with the attendees. I can't speak for others, but for me it was due to ignorance. I used SQL a few times before but was put off by the data warehousing aspect of it. Having gotten more familiar with MySQL in particular over the past couple years, SQL can be simple and beautiful too. I have actually come to prefer it in some cases. Use the right tool for the right task, right?&lt;/p&gt;
&lt;p&gt;An example of focusing on solving the problem. Here is one of the distilled tech specs we have for a component.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A webpage for users to view a dataset of their private contacts&lt;/li&gt;
&lt;li&gt;Sorting capabilities on some of the data fields&lt;/li&gt;
&lt;li&gt;Expected number of contacts per user is several hundreds&lt;/li&gt;
&lt;li&gt;Limit to no more than 10 - 20 users at beta launch&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Most of the efforts went into distilling our problem to make it as easy as possible. Like letting the user edit the data? Nope. UX design? Not until we figure out what data to surface. Because the problem specs are concise, solving this is almost trivial. Our current technical stack to solve this is embarassingly simplistic:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML/CSS/Javascript for front end hosted on Heroku,&lt;/li&gt;
&lt;li&gt;Go for REST-based backend on Heroku; and&lt;/li&gt;
&lt;li&gt;Google Spreadsheet as database.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nothing fancy. Yes, we didn't even bother with spinning up a database.&lt;/p&gt;
&lt;p&gt;People build more complicated things in a hackday than this. That's because the real problem we have is that we &lt;em&gt;think&lt;/em&gt; this is needed with no real proof yet. Perhaps all they need is just having CSV files emailed to them? We tried that too. We want to get this out to our customers as soon as possible for them to use and give us feedback. What is the task that this component is doing for our customers in the scope of our product experience? Abstract problems like these are not trivial and validating them is why we are building things in a startup. Not the other way around.&lt;/p&gt;
&lt;p&gt;As I was reminiscing earlier this year, effective problem solving is more about &lt;a href="/what-i-learned-from-2-years-of-data-sciencing/"&gt;defining a clear problem than coming up with a smart solution&lt;/a&gt;. "A problem well stated is a problem half-solved." In a pursuit of the latest and greatest, I sometimes find myself swung too far in the pendulum towards &lt;a href="/event-driven-finite-state-machine-for-a-distributed-trading-system/"&gt;glorifying the solution&lt;/a&gt; rather than appreciating the effectiveness of clarifying the problem. Sometimes the best solution is to realise &lt;em&gt;not&lt;/em&gt; to do something.&lt;/p&gt;
&lt;p&gt;At this early stage of our startup, the biggest problem should clearly be shipping and learning. Being a Clojure enthusiast myself, we've only used Clojure for 2 of the dozen or so of projects shipped. Most of the rest are a mix of Python, Go, Javascript, Bash scripts, or even Google Doc macros. However, don't mistaken getting things done quickly with cutting corners or committing spaghetti code.  We are adament about keeping our software architecture as simple and decoupled as possible. If that's done right, the individual implementation don't matter because we can always rewrite any of them without impacting the system. That Mechanical Turk project? You can bet that we'll come back to refactor it later if it proves useful. Maybe we'll pick up on goamz again. But at least it's shipped now. I am focusing on the problem and not let building a startup become a technical challenge to satisfy my vanity.&lt;/p&gt;</summary><category term="problem solving"></category><category term="golang"></category></entry></feed>