<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Quantitative Artisan</title><link href="http://www.quantisan.com/" rel="alternate"></link><link href="http://www.quantisan.com/feeds/atom.xml" rel="self"></link><id>http://www.quantisan.com/</id><updated>2013-12-21T00:00:00+00:00</updated><entry><title>What I learned from 2 years of 'data sciencing'</title><link href="http://www.quantisan.com/what-i-learned-from-2-years-of-data-sciencing/" rel="alternate"></link><updated>2013-12-21T00:00:00+00:00</updated><author><name>Paul Lam</name></author><id>tag:www.quantisan.com,2013-12-21:what-i-learned-from-2-years-of-data-sciencing/</id><summary type="html">&lt;p&gt;Last week was my last day at uSwitch.com. From becoming aware of &lt;em&gt;data scientist&lt;/em&gt; as a valid job title on my job offer letter, to speaking at Strata London, to signing a book deal to write about it in our book on Web Data Mining (that's progressing at a glacial pace), I figured that I should jot down some takeaway lessons while this experience is still fresh.&lt;/p&gt;
&lt;h2&gt;It is not about the &lt;em&gt;science&lt;/em&gt;. It is about the &lt;em&gt;data&lt;/em&gt;.&lt;/h2&gt;
&lt;p&gt;In my first year our team delivered a handful of data projects. To name just a few, we developed a dashboard showing lifetime values for all of our millions of customers, demonstrating a 6% revenue gain with a product showcase sorting algorithm modelled by the multi-armed bandit problem, and simulated offline advertising impacts to online sales for optimising marketing spending saving Â£20,000 a month. For various reasons, none of these projects gained traction within the company and became abandoned.&lt;/p&gt;
&lt;p&gt;Much of the efforts spent for those projects were in getting the right data into the right shape. We needed to capture events across applications on different technology stacks, associate individual events to unique customers, and being able to process all those data in an ad-hoc manner. Over the course of my first year, our team of 2 built and evolved a distributed data architecture and scalable data workflow that's based on open source tools and publications from companies like Google, LinkedIn, Twitter, etc. In fact, I scratched enough of my own itch on an open source big data processing project to become one of the maintainers for it.&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;Congratulations to &lt;a href="https://twitter.com/Quantisan"&gt;@Quantisan&lt;/a&gt; for becoming a Cascalog committer today&lt;/p&gt;&amp;mdash; Nathan Marz (@nathanmarz) &lt;a href="https://twitter.com/nathanmarz/statuses/312304668975980545"&gt;March 14, 2013&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;On a rather "by the way" note, we structured lifetime views of customer data from the disparate signals across company verticals. Words had been going around the company that we had this new business intelligence tool, more and more people asked us to help them answer questions with data on their side of the business. The data we surfaced from our data workflow satisfied a wide-spread need in the company to understand customer behaviours. Little did I know that we'll be cleaning and shaping data for most of my second year at uSwitch. Months later to recent times, our commercial team released an external data product that I can't say much but might bring in sizable benefits for the company soon.&lt;/p&gt;
&lt;p&gt;It is glamorous to talk about the latest and greatest machine learning or data visualisation. In practice, I was just cleaning and shaping data. Enabling more people to make use of deep and structured data was what delivered value to the company.&lt;/p&gt;
&lt;h2&gt;Figuring out the right problems to solve is not easy.&lt;/h2&gt;
&lt;p&gt;Had we known that customer behaviour analytics are so valuable, we would have done it earlier on (although many of the other projects were definitely a lot of fun to do). Figuring out the right work to do is one of the most difficult tasks for a data science team. It doesn't help with the fact that the data science role is so vague. Marketing think we are mining for customer insights. Developers think we're toying with Riemann, Storm, or something bleeding edge. Product managers think we are plotting graphs.&lt;/p&gt;
&lt;p&gt;Everyone has ideas but there were only 3 of us in the team. Figuring out where to devote our time and effort is not as easy as it sounds. The issue is that a new project can be almost anything. So which &lt;em&gt;one&lt;/em&gt; should we do? The paradox of choice can be confusing.&lt;/p&gt;
&lt;p&gt;Seeing that this is data science, why not dive right into the data like they would often say in hackathons? I made the mistake in the first few weeks in my data science career just hacking away with the data and then trying to persuade people to make use of the result ... somehow.&lt;/p&gt;
&lt;p&gt;Some interesting graphs came about. But as &lt;a href="https://twitter.com/dancingmango"&gt;Marc&lt;/a&gt; often like to ask, "so what?" Unless someone or something can act on the data, results can only satisfy intellectual curiosity. A business can't survive on funding people to carry out academic studies forever.&lt;/p&gt;
&lt;p&gt;Nowadays, we talk to different stakeholders to try to dig as deep as possible into their needs before any code is written for a new project. This is me handwaving. Frankly, I'm still learning my way and rely a lot on luck through trials and errors to discoverying the right problems to solve.&lt;/p&gt;
&lt;h2&gt;It is a humbling experience.&lt;/h2&gt;
&lt;p&gt;Working with &lt;a href="http://oobaloo.co.uk/"&gt;Paul Ingles&lt;/a&gt; and &lt;a href="http://uk.linkedin.com/pub/abigail-lebrecht/2/95a/42"&gt;Abigail Lebrecht&lt;/a&gt; has been frustratingly awesome. Paul is opinionated about doing things as simple as possible. On more occasions than I can remember, we implemented our own little Clojure libraries because the open source ones available were "trying to do too much". Abigail is adamant about getting the data and analyses right. "What do you mean this data is only 99% correct?" Working day in and day out with Paul and Abigail showed that I had much to learn in efficient problem solving and to question all hidden assumptions.&lt;/p&gt;
&lt;p&gt;In my previous role as a biomedical engineer, I also had the opportunity to work in a multidisciplinary team. But for my &lt;a href="http://www.biomedcentral.com/content/pdf/1743-0003-5-15.pdf"&gt;haptic-robotic therapy project&lt;/a&gt;, I never even considered going into a workshop to build my robot or provide clinical therapy for the stroke patients. What multidisciplinary meant back then were a small group of professionals coming together to work on a project with each person doing different tasks to get the thing to work.&lt;/p&gt;
&lt;p&gt;The advantage of being a data scientist is that I was very hands-on in all aspects of the work. One week I might be pair programming with Paul, and fighting to keep him away from my keyboard, to integrate Riemann for monitoring our data architecture. Other days I am debating with Abigail on the data mining side. Which usually resulted from her finding flaws in the materialised tables that I produced from Cascalog, and then having to come up with a better estimation model for the missing data.&lt;/p&gt;
&lt;h2&gt;So do you want to be a data scientist?&lt;/h2&gt;
&lt;p&gt;This is it for me formally as a data scientist. I am moving back across the Atlantic to the states to cofound a new venture and continuing my journey &lt;a href="http://www.sourceful.io"&gt;to make information accessible&lt;/a&gt;. However, back to the topic at hand. If cleaning vast amount of data, being clueless as to what to do, and debating with colleagues sound like a challenge that you want to take on, I know a company in London that's &lt;a href="http://www.uswitch.com/careers/"&gt;looking for a data scientist&lt;/a&gt;!&lt;/p&gt;</summary></entry><entry><title>Event-driven finite state machine for a distributed trading system</title><link href="http://www.quantisan.com/event-driven-finite-state-machine-for-a-distributed-trading-system/" rel="alternate"></link><updated>2013-05-20T00:00:00+01:00</updated><author><name>Paul Lam</name></author><id>tag:www.quantisan.com,2013-05-20:event-driven-finite-state-machine-for-a-distributed-trading-system/</id><summary type="html">&lt;p&gt;One problem I had when building my distributed trading system is managing states asynchronously from multiple triggers. For example, when the alpha engine say &lt;em&gt;buy&lt;/em&gt;, it needs confirmation from the position engine to see if it is safe to enter a new position. I could chain one check after another imperatively or via callbacks. However, the underlying constraint is that these triggers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;are resource-intensive to generate,&lt;/li&gt;
&lt;li&gt;might need to compose many of them,&lt;/li&gt;
&lt;li&gt;not sequential or have one-to-one depencency, and&lt;/li&gt;
&lt;li&gt;most importantly, they are in separate programs or different machines&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thus I've opted to abstract this problem out into its own module of the system as an event-driven finite state machine (FSM) to keep track of state transitions. Intimidating term, but my first implementation was just if-else statements to qualify as such. The benefit is that each of my system's components only need to push signals and pull states from a central interface without having to worry about what should it call next or poll anything else to see if the stars are aligned. That drastically simplified development and maintenance.&lt;/p&gt;
&lt;p&gt;The responsiblities of my FSM module are to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;listen to all the signals,&lt;/li&gt;
&lt;li&gt;figure out all the transitions, and&lt;/li&gt;
&lt;li&gt;publish the latest states for the rest of the system.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Handling asynchronous events&lt;/h2&gt;
&lt;p&gt;I use RabbitMQ as the message transport layer between my system's modules. All I need to do here is to associate an appropriate message handler to each triggering input for the FSM. Here's one example of the event handlers using the &lt;a href="http://clojurerabbitmq.info/"&gt;Clojure RabbitMQ library, Langohr&lt;/a&gt;. The rest of this part are just standard RabbitMQ publish/subscribe stuff.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn- &lt;/span&gt;&lt;span class="nv"&gt;event-message-handler&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;ch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:keys&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;headers&lt;/span&gt; &lt;span class="nv"&gt;delivery-tag&lt;/span&gt; &lt;span class="nv"&gt;redelivery?&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="nv"&gt;bytes&lt;/span&gt; &lt;span class="nv"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:keys&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;message-type&lt;/span&gt; &lt;span class="nv"&gt;user-id&lt;/span&gt; &lt;span class="nv"&gt;instrument&lt;/span&gt; &lt;span class="nv"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;read-payload&lt;/span&gt; &lt;span class="nv"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="ss"&gt;:position-event&lt;/span&gt; &lt;span class="nv"&gt;message-type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-cached-states&lt;/span&gt; &lt;span class="nv"&gt;user-id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;update-position-state&lt;/span&gt; &lt;span class="nv"&gt;instrument&lt;/span&gt; &lt;span class="nv"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cache-states&lt;/span&gt; &lt;span class="nv"&gt;user-id&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;lbc/ack&lt;/span&gt; &lt;span class="nv"&gt;ch&lt;/span&gt; &lt;span class="nv"&gt;delivery-tag&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is called when a position event is received with information such as user, instrument, and quantity. This handler would thread these information by fetching current states for that user, evaluate next state with input, and then cache the new states for the user.&lt;/p&gt;
&lt;h2&gt;State transitions&lt;/h2&gt;
&lt;p&gt;Below is one of my system's state transition diagrams.&lt;/p&gt;
&lt;p&gt;&lt;img alt="state transition example" src="http://www.quantisan.com/images/2013/qte_state_diagram.png" /&gt;&lt;/p&gt;
&lt;p&gt;There are 4 states represented by 4 colours with 4 triggers signalling state transition. The program is expected to handle up to hundreds of independent states concurrently with event triggers coming in a couple times per second.&lt;/p&gt;
&lt;p&gt;As I was saying, my first implementation is just a set of if-else methods. For example, an &lt;code&gt;engage&lt;/code&gt; trigger would call the &lt;code&gt;engaging&lt;/code&gt; method to determine the next state given the implicit input &lt;code&gt;engage&lt;/code&gt; and current state.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;engaging&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;current&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;condp&lt;/span&gt; &lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="nv"&gt;current&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;white&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;yellow&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;yellow&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;white&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;green&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;red&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;green&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There were a handful of these boilerplate code. So after I deployed my system I came back to refactor them. I've been meaning to give core.logic a try for a while so this seem like a good place to start using it.&lt;/p&gt;
&lt;p&gt;Before we can ask the logic solver question we need to define relations. Here I define a &lt;code&gt;transition&lt;/code&gt; relation to specify all the state transition definition conveniently in one place.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defrel&lt;/span&gt; &lt;span class="nv"&gt;transition&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;input&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;facts&lt;/span&gt; &lt;span class="nv"&gt;transition&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nv"&gt;nil&lt;/span&gt; &lt;span class="ss"&gt;:open&lt;/span&gt; &lt;span class="ss"&gt;:green&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;nil&lt;/span&gt; &lt;span class="ss"&gt;:close&lt;/span&gt; &lt;span class="ss"&gt;:white&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:white&lt;/span&gt; &lt;span class="ss"&gt;:engage&lt;/span&gt; &lt;span class="ss"&gt;:yellow&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:white&lt;/span&gt; &lt;span class="ss"&gt;:disengage&lt;/span&gt; &lt;span class="ss"&gt;:white&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:white&lt;/span&gt; &lt;span class="ss"&gt;:open&lt;/span&gt; &lt;span class="ss"&gt;:green&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:white&lt;/span&gt; &lt;span class="ss"&gt;:close&lt;/span&gt; &lt;span class="ss"&gt;:white&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:yellow&lt;/span&gt; &lt;span class="ss"&gt;:engage&lt;/span&gt; &lt;span class="ss"&gt;:white&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:yellow&lt;/span&gt; &lt;span class="ss"&gt;:disengage&lt;/span&gt; &lt;span class="ss"&gt;:white&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:yellow&lt;/span&gt; &lt;span class="ss"&gt;:open&lt;/span&gt; &lt;span class="ss"&gt;:green&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:yellow&lt;/span&gt; &lt;span class="ss"&gt;:close&lt;/span&gt; &lt;span class="ss"&gt;:yellow&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:green&lt;/span&gt; &lt;span class="ss"&gt;:engage&lt;/span&gt; &lt;span class="ss"&gt;:red&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:green&lt;/span&gt; &lt;span class="ss"&gt;:disengage&lt;/span&gt; &lt;span class="ss"&gt;:red&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:green&lt;/span&gt; &lt;span class="ss"&gt;:open&lt;/span&gt; &lt;span class="ss"&gt;:green&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:green&lt;/span&gt; &lt;span class="ss"&gt;:close&lt;/span&gt; &lt;span class="ss"&gt;:yellow&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:red&lt;/span&gt; &lt;span class="ss"&gt;:engage&lt;/span&gt; &lt;span class="ss"&gt;:green&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:red&lt;/span&gt; &lt;span class="ss"&gt;:disengage&lt;/span&gt; &lt;span class="ss"&gt;:red&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:red&lt;/span&gt; &lt;span class="ss"&gt;:open&lt;/span&gt; &lt;span class="ss"&gt;:red&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:red&lt;/span&gt; &lt;span class="ss"&gt;:close&lt;/span&gt; &lt;span class="ss"&gt;:white&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the event handler methods are just wrappers for a one-liner logic expression asking the question -- given current stage, &lt;code&gt;cur-state&lt;/code&gt;, and input trigger, &lt;code&gt;input&lt;/code&gt;, what state can &lt;code&gt;q&lt;/code&gt; take to satisfy this constraint?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;next-state&lt;/span&gt; 
  &lt;span class="s"&gt;&amp;quot;Solver for next state&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;input&lt;/span&gt; &lt;span class="nv"&gt;cur-state&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;first &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;q&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;transition&lt;/span&gt; &lt;span class="nv"&gt;cur-state&lt;/span&gt; &lt;span class="nv"&gt;input&lt;/span&gt; &lt;span class="nv"&gt;q&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;colour-clicked&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;partial &lt;/span&gt;&lt;span class="nv"&gt;next-state&lt;/span&gt; &lt;span class="ss"&gt;:engage&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;colour-deactivate&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;partial &lt;/span&gt;&lt;span class="nv"&gt;next-state&lt;/span&gt; &lt;span class="ss"&gt;:disengage&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;next-position-colour&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;cur&lt;/span&gt; &lt;span class="nv"&gt;open?&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="nv"&gt;open?&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;next-state&lt;/span&gt; &lt;span class="ss"&gt;:open&lt;/span&gt; &lt;span class="nv"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;next-state&lt;/span&gt; &lt;span class="ss"&gt;:close&lt;/span&gt; &lt;span class="nv"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not the most illustrative core.logic example but it does the job.&lt;/p&gt;
&lt;p&gt;Getting started with core.logic is surprisingly easy. I went through the &lt;a href="https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer"&gt;Primer&lt;/a&gt; and &lt;a href="https://github.com/swannodette/logic-tutorial"&gt;tutorial&lt;/a&gt; and got this working in one try.&lt;/p&gt;
&lt;h2&gt;State caching and sharing&lt;/h2&gt;
&lt;p&gt;Now that the state transition have been taken care of, states are cached and served on Redis for other parts of the system. I use Redis for this because it is fast and easy. Values are stored in &lt;a href="https://github.com/edn-format/edn"&gt;edn format&lt;/a&gt; instead of something more popular like JSON to maintain data structure through the wire.&lt;/p&gt;
&lt;p&gt;This is my first time using edn in production. All inter-process messages in this trading system are edn formatted. It works seamlessly with Clojure by simply using &lt;code&gt;str&lt;/code&gt; to write and &lt;code&gt;clojure.edn/read-string&lt;/code&gt; to read. Besides my other Clojure components in the system, my trade broker interface is written in Java. My Java program use &lt;a href="https://github.com/bpsm/edn-java"&gt;edn-java&lt;/a&gt; to parse and unparse complex Clojure data structures (e.g. nested maps with keywords).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;pool&lt;/span&gt;         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;car/make-conn-pool&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;spec-server1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;car/make-conn-spec&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defmacro &lt;/span&gt;&lt;span class="nv"&gt;with-car&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;car/with-conn&lt;/span&gt; &lt;span class="nv"&gt;pool&lt;/span&gt; &lt;span class="nv"&gt;spec-server1&lt;/span&gt; &lt;span class="o"&gt;~@&lt;/span&gt;&lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;get-cached-states&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;Generate edn from database.&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;edn/read-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;with-car&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;car/get&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;states:&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;cache-states&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;m&lt;/span&gt; &lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;with-car&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;car/set&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;states:&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str &lt;/span&gt;&lt;span class="nv"&gt;m&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I find coupling edn with Redis is a fantastic choice as it's almost like working with Clojure's native concurrency data structures, such as &lt;code&gt;atom&lt;/code&gt;, but also enable external programs to access the data.&lt;/p&gt;
&lt;h2&gt;Simple and quick&lt;/h2&gt;
&lt;p&gt;The entire event-driven FSM program is less than 200 lines of Clojure code and took no more than a few hours to do. However, I did give it some pondering time for a few days. I haven't done any benchmark to estimate performance result. So all I can say is that this setup can handle my simplistic use case with barely any load on the server so I'm happy with it.&lt;/p&gt;
&lt;p&gt;A few years ago, I would have set a whole bunch of flags to switch states. In fact, &lt;a href="https://github.com/Quantisan/JFFramework"&gt;that's what I did&lt;/a&gt;. The biggest satisfaction here for me isn't the implementation or technologies, it is seeing through the underlying problem at hand and solving it with a common pattern that made my work simpler.&lt;/p&gt;</summary><category term="clojure"></category><category term="logic programming"></category><category term="event-driven"></category><category term="distributed"></category><category term="redis"></category></entry><entry><title>Post gone viral, 16000 visitors in a day, how many actually read the article?</title><link href="http://www.quantisan.com/post-gone-viral-16000-visitors-in-a-day-how-many-actually-read-the-article/" rel="alternate"></link><updated>2013-05-12T11:30:00+01:00</updated><author><name>Paul Lam</name></author><id>tag:www.quantisan.com,2013-05-12:post-gone-viral-16000-visitors-in-a-day-how-many-actually-read-the-article/</id><summary type="html">&lt;p&gt;Edit: A few people have &lt;a href="https://news.ycombinator.com/item?id=5693881"&gt;pointed out&lt;/a&gt; that my assumption about the Analytics engagement metric &lt;em&gt;might be&lt;/em&gt; wrong because single page hit &lt;em&gt;could be&lt;/em&gt; counted as zero on engagement time. I'll make an update to this post when smarter people than me on HN can agree on a metric. So I open this problem to Analytics expert, how can I discern readership ratio from Analytics data?&lt;/p&gt;
&lt;p&gt;My reminiscing post about &lt;a href="/how-a-few-screws-cost-2000-and-a-240gb-multinodes-cluster-cost-50/"&gt;my time as an aerospace engineer versus software&lt;/a&gt; was on the front page of Hacker News for about 12 hours on Friday. That garnered 16,374 unique visitors to this site on that single day. However, Google Analytics data say that only 975 of those people spent more than 10 seconds here. Given that there's 652 words in that viral post, I doubt anyone can actually read it within that time. If we assume that only people spending more than 10 seconds have meaningfully read the article, it appears that only 6% of traffic are &lt;em&gt;real&lt;/em&gt; readers from this Hacker News blitz.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Viral post visitors engagement" src="http://www.quantisan.com/images/2013/10052013_analytics_engagement.png" /&gt;&lt;/p&gt;
&lt;p&gt;Given that my usual stats is above 10%, viral traffic audience is understandably less targeted but isn't abysmal by comparison. However, as a data scientist, I'm obliged to say that as this is an one-off event, we couldn't draw a statistically significant observation from it.&lt;/p&gt;
&lt;p&gt;Interestingly, overall traffic the day after on Saturday is back down to 901 visits. And engagement for those spending more than 10 seconds is up at 8.3%. These residual traffic are coming in from domains like Twitter and link sharers.&lt;/p&gt;</summary><category term="data"></category><category term="marketing"></category><category term="viral"></category><category term="analytics"></category></entry><entry><title>How a few screws cost $2000 and a 240GB multinodes cluster cost $50</title><link href="http://www.quantisan.com/how-a-few-screws-cost-2000-and-a-240gb-multinodes-cluster-cost-50/" rel="alternate"></link><updated>2013-05-10T08:30:00+01:00</updated><author><name>Paul Lam</name></author><id>tag:www.quantisan.com,2013-05-10:how-a-few-screws-cost-2000-and-a-240gb-multinodes-cluster-cost-50/</id><summary type="html">&lt;p&gt;About ten years ago I was an electrical engineering intern at MDA Space Robotics. They are the company that designed the Canadarm 1 and 2 used on the International Space Station. I still remember meeting the R&amp;amp;D team next door to see their demo of a 3D LIDAR system mounted on a Mars Rover model. It was one of the competing designs to serve as the eyes of the rover. To put this into perspective, this was at a time when a single-beam scanning laser was common on a robot to gauge distances. Seeing a vision system which can generate 3D polygons of the terrain in real-time for navigation was just unbelievable.&lt;/p&gt;
&lt;p&gt;As for our mundane electronics team, we were designing new power electronics to upgrade the Canadarm2. Obviously, I didn't actually contribute much as an intern. One project which I had my hands on was building loading circuits to simulate the electrical response of the motors on the Canadarm2. So that we can test the new power electronics with live circuit without having motors spinning in the lab. For my particular role, I didn't do any of that either. What I did was design and build safety housing for these big loading circuits.&lt;/p&gt;
&lt;p&gt;Normally, this wouldn't take more than a couple days in a workshop. Not so in a regulated industry. Even though these boxes were only used as a superficial safety mechanism during ground support testing and were never going to be used in production or have anything to do with the actual test itself, we still needed to follow proper engineering guidelines because my mentor told me that it's safer to have a blanket rule for every component than nit-pick what is or isn't regulated.&lt;/p&gt;
&lt;p&gt;After designing the housing in no time (it's just a rectangular shell to cover the circuit, how hard can it be?), I sourced a contractor to mold these polycarbonate shells for us. That's the same material hockey masks use because it's transparent and strong. To secure the shell onto the loading circuit, which are about as big as a moving box each, I needed big screws to bolt it on the baseboard. Seeing that we're an electrical team, we didn't have suitable screws for it in the lab. I figured I should just drive down to Home Depot to buy them.&lt;/p&gt;
&lt;p&gt;Not so fast. Apparently, as I was technically sourcing in a new component, I couldn't just go down the street and get them. I ended up having to order from one of our approved suppliers and had them shipped to us overnight. Not that I was in any hurry. It's because we did all shipping by courier. And even though I needed just a few screws, the supplier don't do small orders either so I had to order the minimum of a hundred or something. Still, all of that didn't really cost that much. The majority of the cost came from my hours spent in getting technical and administrative approvals for adding this new component into our bill of material.&lt;/p&gt;
&lt;p&gt;And so that is how I ended up spending the company around $2000 on a few screws. I never saw an itemised bill for those screws. But I figured that's about right based on hours spent and people's estimated salaries.&lt;/p&gt;
&lt;p&gt;This forgotten story from my engineering days came about this week as &lt;a href="http://oobaloo.co.uk/"&gt;my colleague Paul&lt;/a&gt; and I were spiking out a big data project on Amazon Redshift. On a whim just for the sake of it, we launched a 32 virtual cores, 240GB memory, 32TB storage multi-node cluster with literally just the click of a button. We played with it for a couple hours, did what was needed, and decommissioned the cloud servers. It cost us $45.&lt;/p&gt;
&lt;p&gt;What is my point of the stories? Same concept of materialising an idea. Different time, different industry. Diametrically different prototyping experience.&lt;/p&gt;
&lt;p&gt;Update: this post generated some heated &lt;a href="https://news.ycombinator.com/item?id=5685078"&gt;debates on Hacker News&lt;/a&gt;.&lt;/p&gt;</summary><category term="prototyping"></category><category term="engineering"></category><category term="redshift"></category></entry><entry><title>What should I work on next for Cascalog?</title><link href="http://www.quantisan.com/what-should-i-work-on-next-for-cascalog/" rel="alternate"></link><updated>2013-05-08T21:40:00+01:00</updated><author><name>Paul Lam</name></author><id>tag:www.quantisan.com,2013-05-08:what-should-i-work-on-next-for-cascalog/</id><summary type="html">&lt;p&gt;Too many things to do, too little time. I figured we can do this in a data-driven way. So here's a poll. Please only submit an entry if you use Cascalog. And only one per person. Let's see if an honour system would work.&lt;/p&gt;
&lt;iframe src="https://docs.google.com/a/quantisan.com/spreadsheet/embeddedform?formkey=dGtBNF96bExZZ0E0X0p5ZUFTb2NyTkE6MQ" width="580" height="500" frameborder="0" marginheight="0" marginwidth="0"&gt;Loading...&lt;/iframe&gt;

&lt;h2&gt;Poll result one week later&lt;/h2&gt;
&lt;p&gt;&lt;img alt="poll result" src="http://www.quantisan.com/images/2013/cascalog_poll_graph.png" /&gt;&lt;/p&gt;
&lt;table&gt;
    &lt;tr&gt;&lt;th&gt;Votes&lt;/th&gt; &lt;th&gt;Choice&lt;/th&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;15&lt;/td&gt; &lt;td&gt;Self-contained documentation site, e.g. http://cascalog.quantisan.com (demo address only)&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;10&lt;/td&gt; &lt;td&gt;Improve and consolidate guides into Github wiki&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;11&lt;/td&gt; &lt;td&gt;Bring Cascalog to Cascading 2.1/2.2&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;8&lt;/td&gt; &lt;td&gt;Fix open issues&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;13&lt;/td&gt; &lt;td&gt;Add features and performance increase, e.g. new logic solver, make use of new Cascading features since 2.0&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;2&lt;/td&gt; &lt;td&gt;Other&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;One person voted for integrating other machine learning library into Cascalog and another to &lt;a href="https://github.com/nathanmarz/storm/issues/115"&gt;isolate system library&lt;/a&gt;.&lt;/p&gt;</summary><category term="cascalog"></category></entry><entry><title>Securing a fresh Ubuntu server with Fabric tasks</title><link href="http://www.quantisan.com/securing-a-fresh-ubuntu-server-with-fabric-tasks/" rel="alternate"></link><updated>2013-05-06T08:34:00+01:00</updated><author><name>Paul Lam</name></author><id>tag:www.quantisan.com,2013-05-06:securing-a-fresh-ubuntu-server-with-fabric-tasks/</id><summary type="html">&lt;p&gt;An administrative task that I've done countless number of times is spinning up new servers to host applications like a web dashboard or a trading engine. At uSwitch my colleagues use Puppet and other smart devops tools that I have no idea about to automate our infrastructure. For my own work I just need an easy tool to run some commands over ssh. I chose to use &lt;a href="http://docs.fabfile.org/"&gt;Fabric&lt;/a&gt; to automate this repetitive but necessary task of hardening a fresh Ubuntu server. Now that I have this set of Fabric tasks, after I create a new instance, I can just run a single Fabric task and the server would be configured properly for use.&lt;/p&gt;
&lt;p&gt;The choice for Fabric is because I've been using Fabric for some time already to perform simple deployment tasks. Then I stumbled on &lt;a href="https://niteowebfabfile.readthedocs.org/en/latest/_modules/niteoweb/fabfile/server.html"&gt;an open-source project&lt;/a&gt; that actually configures an Ubuntu server using Fabric. Much of these scripts are based on that source. Automating these tasks saves me a lot of time and ensures consistency of configurations. Perhaps when the need arises, I should look into other tools like &lt;a href="http://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt; too.&lt;/p&gt;
&lt;p&gt;Here are some basic tasks that I perform on a new Ubuntu 12.04 server and the corresponding Fabric task script.&lt;/p&gt;
&lt;h2&gt;Create an administrator account&lt;/h2&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.contrib.files&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;append&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.contrib.files&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sed&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.contrib.files&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;exists&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.operations&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_admin_account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Create an account for an admin to use to access the server.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;root&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;default_password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;default_password&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;default_password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# create user&lt;/span&gt;
    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;egrep &lt;/span&gt;&lt;span class="si"&gt;%(admin)s&lt;/span&gt;&lt;span class="s"&gt; /etc/passwd || adduser &lt;/span&gt;&lt;span class="si"&gt;%(admin)s&lt;/span&gt;&lt;span class="s"&gt; --disabled-password --gecos &amp;quot;&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# add public key for SSH access&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/home/&lt;/span&gt;&lt;span class="si"&gt;%(admin)s&lt;/span&gt;&lt;span class="s"&gt;/.ssh&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mkdir /home/&lt;/span&gt;&lt;span class="si"&gt;%(admin)s&lt;/span&gt;&lt;span class="s"&gt;/.ssh&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pub&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Paste &lt;/span&gt;&lt;span class="si"&gt;%(admin)s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;s public key: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;echo &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%(pub)s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; &amp;gt; /home/&lt;/span&gt;&lt;span class="si"&gt;%(admin)s&lt;/span&gt;&lt;span class="s"&gt;/.ssh/authorized_keys&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# allow this user in sshd_config&lt;/span&gt;
    &lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/etc/ssh/sshd_config&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;AllowUsers &lt;/span&gt;&lt;span class="si"&gt;%(admin)s&lt;/span&gt;&lt;span class="s"&gt;@*&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use_sudo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# allow sudo for maintenance user by adding it to &amp;#39;sudo&amp;#39; group&lt;/span&gt;
    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;gpasswd -a &lt;/span&gt;&lt;span class="si"&gt;%(admin)s&lt;/span&gt;&lt;span class="s"&gt; sudo&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# set default password for initial login&lt;/span&gt;
    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;echo &amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%(admin)s&lt;/span&gt;&lt;span class="s"&gt;:&lt;/span&gt;&lt;span class="si"&gt;%(default_password)s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; | chpasswd&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;harden ssh server&lt;/h2&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;harden_sshd&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Security harden sshd.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="c"&gt;# Disable password authentication&lt;/span&gt;
    &lt;span class="n"&gt;sed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/etc/ssh/sshd_config&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;#PasswordAuthentication yes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;PasswordAuthentication no&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;use_sudo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# Deny root login&lt;/span&gt;
    &lt;span class="n"&gt;sed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/etc/ssh/sshd_config&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;PermitRootLogin yes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;PermitRootLogin no&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;use_sudo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;restart ssh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;setup firewall&lt;/h2&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;install_ufw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rules&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Install and configure Uncomplicated Firewall.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;apt-get update&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;apt-get -yq install ufw&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;configure_ufw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;configure_ufw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rules&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Configure Uncomplicated Firewall.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c"&gt;# reset rules so we start from scratch&lt;/span&gt;
    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ufw --force reset&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;rules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rules&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rules&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;env.rules must be set&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rule&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# re-enable firewall and print rules&lt;/span&gt;
    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ufw --force enable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ufw status verbose&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;time synchronisation daemon&lt;/h2&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_system_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Set timezone and install ``ntp`` to keep time accurate.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;timezone&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/usr/share/zoneinfo/UTC&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# set timezone&lt;/span&gt;
    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cp &lt;/span&gt;&lt;span class="si"&gt;%(timezone)s&lt;/span&gt;&lt;span class="s"&gt; /etc/localtime&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# install NTP&lt;/span&gt;
    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;apt-get -yq install ntp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;enable unattended upgrades&lt;/h2&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;install_unattended_upgrades&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Configure Ubuntu to automatically install security updates.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;env.email must be set&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;apt-get -yq install unattended-upgrades&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/etc/apt/apt.conf.d/50unattended-upgrades&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;//Unattended-Upgrade::Mail &amp;quot;root@localhost&amp;quot;;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;Unattended-Upgrade::Mail &amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%(email)s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;use_sudo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;sed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/etc/apt/apt.conf.d/20auto-upgrades&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;APT::Periodic::Update-Package-Lists &amp;quot;0&amp;quot;;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;APT::Periodic::Update-Package-Lists &amp;quot;1&amp;quot;;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;use_sudo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/etc/apt/apt.conf.d/20auto-upgrades&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="s"&gt;&amp;#39;APT::Periodic::Unattended-Upgrade &amp;quot;1&amp;quot;;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="n"&gt;use_sudo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="devops"></category><category term="Ubuntu"></category><category term="server"></category></entry><entry><title>Minimal variance asset allocation for Stocks ISA</title><link href="http://www.quantisan.com/minimal-variance-asset-allocation-for-stocks-isa/" rel="alternate"></link><updated>2013-01-31T12:30:00+00:00</updated><author><name>Paul Lam</name></author><id>tag:www.quantisan.com,2013-01-31:minimal-variance-asset-allocation-for-stocks-isa/</id><summary type="html">&lt;p&gt;With interest rate in the UK so pathetically low, I thought I might take some chance by making use of a Stocks ISA account in the UK. The problem though, is that I have no knowledge about the London stock market nor do I have the time to follow it. So I wrote a program to pick some Exchange Traded Funds (ETFs) with a primary goal to minimise risk and opportunity costs.&lt;/p&gt;
&lt;p&gt;Here are what I wanted to achieve:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;only a few trades at most a year&lt;/li&gt;
&lt;li&gt;less risk than FTSE100&lt;/li&gt;
&lt;li&gt;more yield than a laddered government bonds portfolio&lt;/li&gt;
&lt;li&gt;require less than an hour per month of maintenance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically, this is a computer-assisted passive investment portfolio.&lt;/p&gt;
&lt;p&gt;The first step is to scrape all the ETF symbols from London Stock Exchange on &lt;a href="http://www.londonstockexchange.com/exchange/prices-and-markets/ETFs/ETFs.html"&gt;these pages&lt;/a&gt;. I use &lt;code&gt;getNodeSet&lt;/code&gt; from &lt;code&gt;XML&lt;/code&gt; package in R to select the relevant data from the HTML page with XPath.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;page &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; getURL&lt;span class="p"&gt;(&lt;/span&gt;url&lt;span class="p"&gt;,&lt;/span&gt; curl&lt;span class="o"&gt;=&lt;/span&gt;curl&lt;span class="p"&gt;)&lt;/span&gt;
tree &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; htmlTreeParse&lt;span class="p"&gt;(&lt;/span&gt;page&lt;span class="p"&gt;,&lt;/span&gt; useInternalNodes&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
xpath &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;//table[@class = &amp;#39;table_dati&amp;#39;]/tbody&amp;quot;&lt;/span&gt;
node &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; getNodeSet&lt;span class="p"&gt;(&lt;/span&gt;tree&lt;span class="p"&gt;,&lt;/span&gt; xpath&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This program only considers ETF because this portfolio is to diversify risk and not pick &lt;em&gt;winning&lt;/em&gt; stocks. ETFs provide &lt;a href="http://www.economist.com/news/finance-and-economics/21570711-anniversary-successful-financial-innovation-twenty-years-young"&gt;convenient exposure to various asset classes such as equities, bonds, and commodities at low costs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next is to scrape profile information for each symbol from Yahoo. We want data such as the fund's expense ratio and asset class category.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;url &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; paste&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://finance.yahoo.com/q/pr?s=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; symbol&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;+Profile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; sep&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
tree &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; htmlTreeParse&lt;span class="p"&gt;(&lt;/span&gt;url&lt;span class="p"&gt;,&lt;/span&gt; useInternalNodes&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
xpath &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;//table[contains(concat(&amp;#39; &amp;#39;, @class, &amp;#39; &amp;#39;), &amp;#39; yfnc_datamodoutline1 &amp;#39;)]/tr/td/table&amp;quot;&lt;/span&gt;
node &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; getNodeSet&lt;span class="p"&gt;(&lt;/span&gt;tree&lt;span class="p"&gt;,&lt;/span&gt; xpath&lt;span class="p"&gt;)&lt;/span&gt;

operation &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; tryCatch&lt;span class="p"&gt;(&lt;/span&gt;readHTMLTable&lt;span class="p"&gt;(&lt;/span&gt;node&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]]),&lt;/span&gt; error &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;e&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kc"&gt;NA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
overview &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; tryCatch&lt;span class="p"&gt;(&lt;/span&gt;readHTMLTable&lt;span class="p"&gt;(&lt;/span&gt;node&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]),&lt;/span&gt; error &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;e&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kc"&gt;NA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once the funds' fundamental data are fetched, we can do a preliminary screening. I am filtering for:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Actively traded funds,&lt;/li&gt;
&lt;li&gt;Sufficient age (3 years), and&lt;/li&gt;
&lt;li&gt;Only the best 3 expense ratio efficiency from each class&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That last point is particularly important as illustrated in this plot.&lt;/p&gt;
&lt;p&gt;&lt;img alt="London funds expense by category" src="http://www.quantisan.com/images/2013/london_etf_mer_category.png" /&gt;&lt;/p&gt;
&lt;p&gt;The above plot couldn't fit in this frame but it shows that expense ratios are all over the place. What matters is that the raw data is available for use.&lt;/p&gt;
&lt;p&gt;The plot below is clearer. It shows expense ratio by the fund's issuer. You can see that Vanguard funds generally have the best expense ratio as is commonly known.&lt;/p&gt;
&lt;p&gt;&lt;img alt="London funds expense by issuer" src="http://www.quantisan.com/images/2013/london_etf_mer.png" /&gt;&lt;/p&gt;
&lt;p&gt;The initial ETF list has 667 funds in 104 categories. The screened list narrows it down to 20 funds in 18 categories. Most that were screened are niche funds such as Islamic Global Equity and regional real estate funds.&lt;/p&gt;
&lt;p&gt;Out of that 20 funds, I apply the popular &lt;a href="http://en.wikipedia.org/wiki/Modern_portfolio_theory"&gt;Modern Portfolio Theory&lt;/a&gt; to minimise risk using historical quotes data with &lt;code&gt;quantmod&lt;/code&gt;'s Yahoo data fetcher. Given the expected returns of each asset, &lt;code&gt;er&lt;/code&gt; and their covariance matrix, &lt;code&gt;cov.mat&lt;/code&gt;, a long-only efficient portfolio weighting of those assets can be solved with quadratic programming like so.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Dmat &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;cov.mat
dvec &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; rep.int&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; N&lt;span class="p"&gt;)&lt;/span&gt;
Amat &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; cbind&lt;span class="p"&gt;(&lt;/span&gt;rep&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;N&lt;span class="p"&gt;),&lt;/span&gt; er&lt;span class="p"&gt;,&lt;/span&gt; diag&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;N&lt;span class="p"&gt;))&lt;/span&gt;
bvec &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; target.return&lt;span class="p"&gt;,&lt;/span&gt; rep&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;N&lt;span class="p"&gt;))&lt;/span&gt;
result &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; solve.QP&lt;span class="p"&gt;(&lt;/span&gt;Dmat&lt;span class="o"&gt;=&lt;/span&gt;Dmat&lt;span class="p"&gt;,&lt;/span&gt;dvec&lt;span class="o"&gt;=&lt;/span&gt;dvec&lt;span class="p"&gt;,&lt;/span&gt;Amat&lt;span class="o"&gt;=&lt;/span&gt;Amat&lt;span class="p"&gt;,&lt;/span&gt;bvec&lt;span class="o"&gt;=&lt;/span&gt;bvec&lt;span class="p"&gt;,&lt;/span&gt;meq&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To get these weightings,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;IGLT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;   &lt;span class="n"&gt;MIDD&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;   &lt;span class="n"&gt;INXG&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;   &lt;span class="n"&gt;EQQQ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;   &lt;span class="n"&gt;SLXX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;   &lt;span class="n"&gt;IBGS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;   &lt;span class="n"&gt;IUKP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;   &lt;span class="n"&gt;LUK2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt; 
&lt;span class="mf"&gt;0.603023&lt;/span&gt; &lt;span class="mf"&gt;0.122829&lt;/span&gt; &lt;span class="mf"&gt;0.116879&lt;/span&gt; &lt;span class="mf"&gt;0.084122&lt;/span&gt; &lt;span class="mf"&gt;0.037906&lt;/span&gt; &lt;span class="mf"&gt;0.017975&lt;/span&gt; &lt;span class="mf"&gt;0.014051&lt;/span&gt; &lt;span class="mf"&gt;0.003215&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But here's the catch, this mean-variance optimisation approach which I'm using does not work in the real-world. The problem is that it optimises for historical data under simplistic assumptions. For potential improvements on this model, start with &lt;a href="http://quant.stackexchange.com/questions/44/what-methods-do-you-use-to-improve-expected-return-estimates-when-constructing-a"&gt;this Q&amp;amp;A on StackExchange&lt;/a&gt; but be warned that it's a rabbit hole to go down in.&lt;/p&gt;
&lt;p&gt;Knowing that I shouldn't trust this model much, I do this a couple times under different scenarios on the efficient frontier and union the top weighted assets from each run as a compensation by sampling.&lt;/p&gt;
&lt;p&gt;The result is a suggestion of six ETFs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Symbol&lt;/span&gt;            &lt;span class="n"&gt;Name&lt;/span&gt;                   &lt;span class="n"&gt;category&lt;/span&gt;
&lt;span class="n"&gt;BRIC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;    &lt;span class="n"&gt;ISHARESII&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;                &lt;span class="n"&gt;BRIC&lt;/span&gt; &lt;span class="n"&gt;Equity&lt;/span&gt;
&lt;span class="n"&gt;EQQQ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;   &lt;span class="n"&gt;POWERSHS&lt;/span&gt; &lt;span class="n"&gt;EQQQ&lt;/span&gt; &lt;span class="n"&gt;US&lt;/span&gt; &lt;span class="n"&gt;Large&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Cap&lt;/span&gt; &lt;span class="n"&gt;Growth&lt;/span&gt; &lt;span class="n"&gt;Equity&lt;/span&gt;
&lt;span class="n"&gt;IGLS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="n"&gt;ISHARESIII&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="err"&gt;Â£&lt;/span&gt;        &lt;span class="n"&gt;GBP&lt;/span&gt; &lt;span class="n"&gt;Government&lt;/span&gt; &lt;span class="n"&gt;Bond&lt;/span&gt;
&lt;span class="n"&gt;INXG&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="n"&gt;GBP&lt;/span&gt; &lt;span class="n"&gt;IDX&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;LNK&lt;/span&gt; &lt;span class="n"&gt;GLT&lt;/span&gt;  &lt;span class="n"&gt;GBP&lt;/span&gt; &lt;span class="n"&gt;Inflation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Linked&lt;/span&gt; &lt;span class="n"&gt;Bond&lt;/span&gt;
&lt;span class="n"&gt;MIDD&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;  &lt;span class="n"&gt;ISHARESFTSE250&lt;/span&gt;          &lt;span class="n"&gt;UK&lt;/span&gt; &lt;span class="n"&gt;Mid&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Cap&lt;/span&gt; &lt;span class="n"&gt;Equity&lt;/span&gt;
&lt;span class="n"&gt;SLXX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="n"&gt;ISHSIII&lt;/span&gt; &lt;span class="n"&gt;IBX&lt;/span&gt; &lt;span class="err"&gt;Â£&lt;/span&gt;&lt;span class="n"&gt;CB&lt;/span&gt;         &lt;span class="n"&gt;GBP&lt;/span&gt; &lt;span class="n"&gt;Corporate&lt;/span&gt; &lt;span class="n"&gt;Bond&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Out of these I hand picked IGLS.L and MIDD.L for a conservative 80% bonds and 20% equity portfolio. This plot below shows the annualised return versus risk of ISF (FTSE100), an equal-weighted portfolio of the pre-screened 20 ETFs, and this final portfolio of two ETFs. Notice the historic risk of this final portfolio is a third of FTSE100.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Return vs risk" src="http://www.quantisan.com/images/2013/london_etf_rr.png" /&gt;&lt;/p&gt;
&lt;p&gt;Not surprisingly, what my program derived from scratch is similar to the commonly suggested portfolio balance of bonds, local equities, and emerging market blend. What this program offers is picking out the specific ETFs from the hundreds of ETFs traded on London Stock Exchange for a balanced asset allocation.&lt;/p&gt;
&lt;p&gt;The complete R source code for this project is &lt;a href="https://github.com/Quantisan/touzi"&gt;available on Github&lt;/a&gt;.&lt;/p&gt;</summary><category term="London"></category><category term="ETF"></category><category term="R"></category></entry><entry><title>Unconfusing false-positive and false-negative statistical errors confusion</title><link href="http://www.quantisan.com/unconfusing-false-positive-and-false-negative-statistical-errors-confusion/" rel="alternate"></link><updated>2013-01-10T22:28:00+00:00</updated><author><name>Paul Lam</name></author><id>tag:www.quantisan.com,2013-01-10:unconfusing-false-positive-and-false-negative-statistical-errors-confusion/</id><summary type="html">&lt;p&gt;I was reading a blog post &lt;a href="http://mcfunley.com/whom-the-gods-would-destroy-they-first-give-real-time-analytics"&gt;about real-time analytics&lt;/a&gt; over the lunch today. In it, the author made a claim that "funny business with timeframes can coerce most A/B tests into statistical significance." There's also &lt;a href="http://mcfunley.com/static/811609fd0f3/images/real-time-screwed.png"&gt;this plot illustrating two time series of the cumulative number of heads in a two-fair-coin-comparison&lt;/a&gt;. Yet, time nor ordering has an effect on test results because each flip is independent. Not content with his claim, I wrote a coin flipping simulation in R to prove him wrong.&lt;/p&gt;
&lt;p&gt;This plot shows p-values of proportion tests for two simulated fair coin flips that they are different. Each of these tests are repeated with increasing number of flips per test. Since both coins are fair, we should expect no p-value should dip below our 95% significance level (red horizontal line). Yet we're seeing some false positives (i.e. a claim of evidence when there really isn't) that say the two coins are statistically different.&lt;/p&gt;
&lt;p&gt;&lt;img alt="false positive vs sample size, up to N=1000" src="http://www.quantisan.com/images/2013/coin-false-positives-increasing-1000.png" /&gt;&lt;/p&gt;
&lt;p&gt;A better illustration is to run a test with 1000 flips, get a test result, and repeat many times for many results. We see that sometimes false positive happens. Given that our significance level is 95%, we can expect false positives to happen 1 in 20 times.&lt;/p&gt;
&lt;p&gt;&lt;img alt="repeated sampling at 1000 flips" src="http://www.quantisan.com/images/2013/coin-false-positives-1000-only.png" /&gt;&lt;/p&gt;
&lt;p&gt;Remembering that I should do a power calculation to get an optimal sample size, doing &lt;code&gt;power.prop.test(p1=0.5, p2=0.501, power=0.90, alternative="two.sided")&lt;/code&gt; says N should be 5253704.&lt;/p&gt;
&lt;p&gt;So this is a plot of doing many tests with 5253704 flips each.&lt;/p&gt;
&lt;p&gt;&lt;img alt="N=5253704" src="http://www.quantisan.com/images/2013/coin-false-positives-power.png" /&gt;&lt;/p&gt;
&lt;p&gt;But the false positives didn't improve at all! By now, I'm quite confused. So, I asked for help on StackExchange and received &lt;a href="http://stats.stackexchange.com/q/47434/3847"&gt;this insight&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;What&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;being&lt;/span&gt; &lt;span class="n"&gt;gained&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;increase&lt;/span&gt;
&lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="n"&gt;positives&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;equivalently&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;decrease&lt;/span&gt;
&lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="n"&gt;negatives&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;That&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="n"&gt;positives&lt;/span&gt; &lt;span class="n"&gt;does&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;precisely&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;guarantee&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And so, a 95% significance level remains 95% significant (1 in 20 chance of false positive) regardless of increasing sample sizes as shown. Again. &lt;/p&gt;
&lt;p&gt;&lt;img alt="false positive up to 10k trials" src="http://www.quantisan.com/images/2013/coin-false-positive.png" /&gt;&lt;/p&gt;
&lt;p&gt;What is, in fact, gained for increasing sample size is reduced false negative, which is defined as failing to make a claim when it is there. To illustrate that, we need a different plot because it is an entirely different circumstance. We have two new coins, and they are different. &lt;/p&gt;
&lt;p&gt;Say we have one fair (p=50%) coin and another that's slightly biased (p=51%). This plot shows the result of running the same proportion test to see if these two are statistically different. As we increase sample size, the amount of false negative results, points &lt;em&gt;above&lt;/em&gt; the red line (0.05 p-value, 95% significance level) denoting negative results, are clearly reduced as sample size increases. Thus this plot is illustrating that false negatives decreases as sample size increases.&lt;/p&gt;
&lt;p&gt;&lt;img alt="false negative increasing samples" src="http://www.quantisan.com/images/2013/coin-false-negative.png" /&gt;&lt;/p&gt;
&lt;p&gt;"Funny business" do not coerce A/B tests into statistical significance. The fact that a 95% significance gives 1 in 20 false positives is in fact what it guarantees. To decrease false positive, simply test at a higher significance level. For example, &lt;code&gt;prop.test(c(heads.A, heads.B), n=c(N, N), alternative="two.sided", conf.level=0.99)&lt;/code&gt; to set it to 99% instead of the default 95%.&lt;/p&gt;
&lt;p&gt;The R source code for this mental sojourn are available at &lt;a href="https://gist.github.com/4502739"&gt;this gist on Github&lt;/a&gt;.&lt;/p&gt;</summary><category term="statistics"></category><category term="R"></category></entry><entry><title>Unlock Lisp sorcery in your data structure by implementing Clojure ISeq</title><link href="http://www.quantisan.com/unlock-lisp-sorcery-in-your-data-structure-by-implementing-clojure-iseq/" rel="alternate"></link><updated>2012-12-31T15:42:00+00:00</updated><author><name>Paul Lam</name></author><id>tag:www.quantisan.com,2012-12-31:unlock-lisp-sorcery-in-your-data-structure-by-implementing-clojure-iseq/</id><summary type="html">&lt;p&gt;People that has gone through The Little Schemer might not find this exciting. One of the things that I discovered while patching &lt;a href="http://quantisan.github.com/clatrix/"&gt;Clatrix&lt;/a&gt; is that implementing clojure.lang.ISeq interface in your custom data structure unlocks the magic of Lisp composition. By enabling primative operators such as &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;more&lt;/code&gt;, &lt;code&gt;cons&lt;/code&gt;, higher-level operations such as &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;reduce&lt;/code&gt; would just work when operating on your data structure. I find it fascinating that a native Fortran matrix object (through jBLAS) can be made clojury with a few magic operations implemented.&lt;/p&gt;
&lt;p&gt;However, getting a &lt;code&gt;deftype&lt;/code&gt; implementation of &lt;code&gt;Matrix&lt;/code&gt; correct took some effort as these operators are not as simple as they seem.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ISeq&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;IPersistentCollection&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;ISeq&lt;/span&gt; &lt;span class="nf"&gt;next&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;ISeq&lt;/span&gt; &lt;span class="nf"&gt;more&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;ISeq&lt;/span&gt; &lt;span class="nf"&gt;cons&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For example, say we have a matrix &lt;code&gt;M&lt;/code&gt; like so.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;M&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;matrix&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]]))&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;M&lt;/span&gt;
&lt;span class="nv"&gt;A&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="nv"&gt;x3&lt;/span&gt; &lt;span class="nv"&gt;matrix&lt;/span&gt;
&lt;span class="nv"&gt;-------------&lt;/span&gt;
&lt;span class="mf"&gt;1.00&lt;/span&gt;&lt;span class="nv"&gt;e+00&lt;/span&gt;  &lt;span class="mf"&gt;2.00&lt;/span&gt;&lt;span class="nv"&gt;e+00&lt;/span&gt;  &lt;span class="mf"&gt;3.00&lt;/span&gt;&lt;span class="nv"&gt;e+00&lt;/span&gt; 
&lt;span class="mf"&gt;4.00&lt;/span&gt;&lt;span class="nv"&gt;e+00&lt;/span&gt;  &lt;span class="mf"&gt;5.00&lt;/span&gt;&lt;span class="nv"&gt;e+00&lt;/span&gt;  &lt;span class="mf"&gt;6.00&lt;/span&gt;&lt;span class="nv"&gt;e+00&lt;/span&gt; 
&lt;span class="mf"&gt;7.00&lt;/span&gt;&lt;span class="nv"&gt;e+00&lt;/span&gt;  &lt;span class="mf"&gt;8.00&lt;/span&gt;&lt;span class="nv"&gt;e+00&lt;/span&gt;  &lt;span class="mf"&gt;9.00&lt;/span&gt;&lt;span class="nv"&gt;e+00&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Reducing &lt;code&gt;M&lt;/code&gt; across its maps is equivalent to a column-wise operation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reduce &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map + &lt;/span&gt;&lt;span class="nv"&gt;%1&lt;/span&gt; &lt;span class="nv"&gt;%2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;M&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;12.0&lt;/span&gt; &lt;span class="mf"&gt;15.0&lt;/span&gt; &lt;span class="mf"&gt;18.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yet for a while this doesn't work because I wasn't careful on my implementation of &lt;code&gt;first&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Consider the case of a 2x2 matrix. A 2x2 matrix is structurally equivalent to a nested vector. Calling &lt;code&gt;first&lt;/code&gt; on these would yield:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;first &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;first &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;matrix&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]]))&lt;/span&gt;
&lt;span class="nv"&gt;A&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nv"&gt;x2&lt;/span&gt; &lt;span class="nv"&gt;matrix&lt;/span&gt;
&lt;span class="nv"&gt;-------------&lt;/span&gt;
&lt;span class="mf"&gt;1.00&lt;/span&gt;&lt;span class="nv"&gt;e+00&lt;/span&gt;  &lt;span class="mf"&gt;2.00&lt;/span&gt;&lt;span class="nv"&gt;e+00&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And for a 3x1 vector matrix, i.e. one-dimensional, it is equivalent to a regular vector.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;first &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;first &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;matrix&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But here's a tricky bit. What happens during &lt;code&gt;reduce&lt;/code&gt; as it keeps recurring &lt;code&gt;next&lt;/code&gt; and &lt;code&gt;first&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Let's step this through for &lt;code&gt;(reduce #(map + %1 %2) M)&lt;/code&gt;. &lt;code&gt;%1&lt;/code&gt; is basically the result so far and &lt;code&gt;%2&lt;/code&gt; is the &lt;code&gt;first&lt;/code&gt; of the remaining collection to be processed.&lt;/p&gt;
&lt;table border="1"&gt;
    &lt;tr&gt;&lt;th&gt;iteration&lt;/th&gt;&lt;th&gt;accumulated (%1)&lt;/th&gt;&lt;th&gt;first (%2)&lt;/th&gt;&lt;th&gt;remaining&lt;/th&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;nil&lt;/td&gt;&lt;td&gt;[1 2 3]&lt;/td&gt;&lt;td&gt;[[1 2 3] [4 5 6] [7 8 9]]&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;[1 2 3]&lt;/td&gt;&lt;td&gt;[4 5 6]&lt;/td&gt;&lt;td&gt;[[4 5 6] [7 8 9]]&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;2, bad&lt;/td&gt;&lt;td&gt;[5 7 9]&lt;/td&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;[[7 8 9]]&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;2, good&lt;/td&gt;&lt;td&gt;[5 7 9]&lt;/td&gt;&lt;td&gt;[7 8 9]&lt;/td&gt;&lt;td&gt;[[7 8 9]]&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;The problem arises in the second iteration. Calling &lt;code&gt;(rest [[4 5 6] [7 8 9]])&lt;/code&gt; returns &lt;code&gt;[[7 8 9]]&lt;/code&gt;. However, &lt;code&gt;(matrix [[7 8 9]])&lt;/code&gt; is a row vector and &lt;code&gt;(matrix [7 8 9])&lt;/code&gt; is a column vector. Both are considered one dimensional. In either case, &lt;code&gt;first&lt;/code&gt; of a vector should return the first element, which is a number. Thus at this iteration, &lt;code&gt;reduce&lt;/code&gt; breaks because you can't map a sequence with a number, &lt;code&gt;(map + [5 7 9] 7)&lt;/code&gt;, to get an accumulated value.&lt;/p&gt;
&lt;p&gt;What we want though, is for the second iteration to return &lt;code&gt;[7 8 9]&lt;/code&gt; instead because the &lt;em&gt;original&lt;/em&gt; matrix is not a vector. Luckily, this particular problem has been solved by my colleague &lt;a href="https://github.com/antoniogarrote"&gt;Antonio Garrote&lt;/a&gt; when he &lt;a href="https://github.com/forward/incanter-BLAS"&gt;did this in Java a year ago&lt;/a&gt; by keeping a predicate field signifying is &lt;em&gt;this&lt;/em&gt; matrix supposed to be vector or not.&lt;/p&gt;
&lt;p&gt;So there you have it. If you find yourself needing to implement &lt;code&gt;deftype&lt;/code&gt; to build your own data structure in Clojure. Do consider implementing &lt;code&gt;clojure.lang.ISeq&lt;/code&gt; to leverage high-level Clojure functions but be careful about those seemingly simplistic primitive operators.&lt;/p&gt;</summary><category term="clojure"></category><category term="Incanter"></category></entry><entry><title>Recommendation discovery via graph traversal</title><link href="http://www.quantisan.com/recommendation-discovery-via-graph-traversal/" rel="alternate"></link><updated>2012-11-14T22:31:00+00:00</updated><author><name>Paul Lam</name></author><id>tag:www.quantisan.com,2012-11-14:recommendation-discovery-via-graph-traversal/</id><summary type="html">&lt;p&gt;I am quite excited about graph computing these days. It represents relational data such as customer behaviour naturally and otherwise complicated problems break down to simple pattern matching algorithm. Take recommendation system, for example. One way to do it is by machine learning as &lt;a href="http://en.wikipedia.org/wiki/Recommender_system"&gt;Wikipedia suggests&lt;/a&gt;. But if we represent the data in a property graph, a simplistic solution surfaces intuitively. &lt;/p&gt;
&lt;p&gt;Picture this. If Bob likes item A; Cathy likes both item A and item B; then we can make the commutative link of item B for Bob.&lt;/p&gt;
&lt;p&gt;Let's try it out in &lt;a href="http://www.neo4j.org"&gt;Neo4j&lt;/a&gt; using &lt;a href="http://console.neo4j.org/?id=2096v6"&gt;this pre-built web console example&lt;/a&gt;. You should see this graph with 4 person and 5 food items.&lt;/p&gt;
&lt;p&gt;&lt;img alt="simple graph" src="/static/images/2012/simple_graph.png" /&gt;&lt;/p&gt;
&lt;p&gt;Using this &lt;a href="http://docs.neo4j.org/chunked/milestone/cypher-query-lang.html"&gt;Cypher query&lt;/a&gt;, we get a list of all users and what food they like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;START&lt;/span&gt;   &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;node_auto_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;MATCH&lt;/span&gt;   &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;IS_A&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;LIKE&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="n"&gt;RETURN&lt;/span&gt;  &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The second line is where we &lt;code&gt;match&lt;/code&gt; the pattern that &lt;code&gt;person is a user&lt;/code&gt; and that &lt;code&gt;person like x&lt;/code&gt;. This query reads almost like the question which we want to ask.&lt;/p&gt;
&lt;p&gt;We return all the person and those food they like, &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;+------------------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+------------------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Andy&amp;quot;&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Andy&amp;quot;&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;orange&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Andy&amp;quot;&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bread&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Bob&amp;quot;&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Bob&amp;quot;&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bread&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Cat&amp;quot;&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Cat&amp;quot;&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;orange&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Cat&amp;quot;&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bread&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Cat&amp;quot;&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fish&amp;quot;&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Doug&amp;quot;&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Doug&amp;quot;&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;orange&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+------------------------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Taking this a step further, we can find all the top common &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; that people like together in the above graph.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;START   food &lt;span class="o"&gt;=&lt;/span&gt; node&lt;span class="o"&gt;:&lt;/span&gt;node_auto_index&lt;span class="p"&gt;(&lt;/span&gt;type &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;food&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; user &lt;span class="o"&gt;=&lt;/span&gt; node&lt;span class="o"&gt;:&lt;/span&gt;node_auto_index&lt;span class="p"&gt;(&lt;/span&gt;type &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
MATCH   food&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;IS_A&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;x&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;LIKE&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;person&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;IS_A&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;user&lt;span class="p"&gt;,&lt;/span&gt;
        person&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;LIKE&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;y&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;IS_A&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;food
WHERE   NOT x &lt;span class="o"&gt;=&lt;/span&gt; y
RETURN  x.name&lt;span class="p"&gt;,&lt;/span&gt; y.name&lt;span class="p"&gt;,&lt;/span&gt; count&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; as cnt 
ORDER BY cnt DESC 
LIMIT &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Resulting in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;+---------------------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+---------------------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;orange&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bread&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;orange&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bread&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bread&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;orange&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;orange&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bread&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fish&amp;quot;&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fish&amp;quot;&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bread&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fish&amp;quot;&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bread&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fish&amp;quot;&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+---------------------------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So we find that a lot uf users that likes apple also likes orange or bread. We can then pick out all the people that likes &lt;code&gt;apple&lt;/code&gt; but not &lt;code&gt;orange&lt;/code&gt; yet to suggest (read: spam) &lt;code&gt;orange&lt;/code&gt; to them.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;START&lt;/span&gt;   &lt;span class="n"&gt;apple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;node_auto_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;orange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;node_auto_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;orange&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;MATCH&lt;/span&gt;   &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;LIKE&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;apple&lt;/span&gt;
&lt;span class="n"&gt;WHERE&lt;/span&gt;   &lt;span class="n"&gt;NOT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;LIKE&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;orange&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;RETURN&lt;/span&gt;  &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="o"&gt;+-------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+-------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Bob&amp;quot;&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+-------------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Easy, yes?&lt;/p&gt;</summary><category term="graph computing"></category><category term="recommendation system"></category><category term="neo4j"></category><category term="cypher"></category></entry></feed>