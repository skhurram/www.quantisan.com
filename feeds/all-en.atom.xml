<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Quantitative Artisan</title><link href="http://www.quantisan.com/" rel="alternate"></link><link href="http://www.quantisan.com/feeds/all-en.atom.xml" rel="self"></link><id>http://www.quantisan.com/</id><updated>2014-05-12T00:00:00+01:00</updated><entry><title>Simple, Easy, Quick: Using Go along with Clojure</title><link href="http://www.quantisan.com/simple-easy-quick-using-go-along-with-clojure/" rel="alternate"></link><updated>2014-05-12T00:00:00+01:00</updated><author><name>Paul Lam</name></author><id>tag:www.quantisan.com,2014-05-12:simple-easy-quick-using-go-along-with-clojure/</id><summary type="html">&lt;p&gt;We had questions about how Go compares with Clojure at the Boston Clojure Meetup this week. My default answer to any technology this-vs-that debate is -- &lt;em&gt;it depends&lt;/em&gt;. But it just so happens that our backend system at Glassy Media consist of an even split of services written between Go and Clojure. However, this isn't due to any technical reasoning. Using the two languages together feels right to our particular needs.&lt;/p&gt;
&lt;p&gt;Rich Hickey made clear the distinction between simple and easy in his famous talk, &lt;a href="http://www.infoq.com/presentations/Simple-Made-Easy"&gt;Simple Made Easy&lt;/a&gt;. Clojure made simple easy. But sometimes I don't want simple and easy. I want quick and easy. That is exactly where Go can complement Clojure.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Simple, Easy, Quick" src="http://www.quantisan.com/images/2014/simple_easy_quick_triangle.png" /&gt;&lt;/p&gt;
&lt;p&gt;How Clojure made simple easy has been a path well beaten. The rest of this post is why I think Go is quick and easy.&lt;/p&gt;
&lt;h2&gt;Our Path To Go&lt;/h2&gt;
&lt;p&gt;Once upon a time (i.e. a few months ago) our backend cogs and gears consisted of a bunch of command line programs that we would run on our laptop every now and then to churn our data. We distributed those tools to our non-developer helpers to serve our clients. Those command line tools started out in Python or Node.js. But distributing, maintaining, and updating those programs to other people's laptops eventually became a real pain. So one weekend I rewrote one of our command line programs in Go. On Monday I shared a link to a single executable file on Dropbox and people were able to run it directly from there. No more asking people to go on command line and typing &lt;code&gt;pip install&lt;/code&gt; or &lt;code&gt;npm install&lt;/code&gt;. That was how we started using Go at Glassy Media.&lt;/p&gt;
&lt;p&gt;I had no prior experience with Go before that. The fact that I was able to learn the language and then produce something useful over a weekend doesn't have to do with me. It is the practicality of the language, clear documentation, and smart tooling that makes Go easy to ramp up.&lt;/p&gt;
&lt;h3&gt;Language Practicality&lt;/h3&gt;
&lt;p&gt;Take the &lt;code&gt;for&lt;/code&gt; loop as an example, you can iterate over a map like so. (code sample taken from &lt;a href="http://golang.org/doc/effective_go.html#for"&gt;Effective Go&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;oldMap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;newMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The same &lt;code&gt;range&lt;/code&gt; can be used to iterate over an array:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No need for additional syntax to do the same thing. And there're no &lt;code&gt;while&lt;/code&gt; or &lt;code&gt;do&lt;/code&gt; loops too. There is only &lt;code&gt;for&lt;/code&gt; to do all of that as shown.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// complete `for` struct&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// only check condition like a `while`&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;condition&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// or, nothing like a `do`&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Go core syntax is consistently minimal like so.&lt;/p&gt;
&lt;h3&gt;Clear Documentation&lt;/h3&gt;
&lt;p&gt;From &lt;a href="http://blog.golang.org/godoc-documenting-go-code"&gt;The Go Programming Language&lt;/a&gt;,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Go&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="n"&gt;takes&lt;/span&gt; &lt;span class="n"&gt;documentation&lt;/span&gt; &lt;span class="n"&gt;seriously&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Documentation&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;huge&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt;
 &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;making&lt;/span&gt; &lt;span class="n"&gt;software&lt;/span&gt; &lt;span class="n"&gt;accessible&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;maintainable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Of&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;must&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt;
 &lt;span class="n"&gt;well&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;written&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;accurate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="n"&gt;must&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;easy&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;write&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;
 &lt;span class="n"&gt;maintain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Ideally&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;coupled&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;itself&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt;
 &lt;span class="n"&gt;documentation&lt;/span&gt; &lt;span class="n"&gt;evolves&lt;/span&gt; &lt;span class="n"&gt;along&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;easier&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;
 &lt;span class="n"&gt;programmers&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;produce&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="n"&gt;documentation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;everyone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Go's source code documentation has simple convention and automatic publishing. Take our trivial &lt;a href="https://github.com/GlassyMedia/go-arrays"&gt;go-arrays library for manipulating arrays&lt;/a&gt;. Here is one of the functions and its docstring.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Contains check if &amp;#39;s&amp;#39; is in &amp;#39;coll&amp;#39; string array&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;coll&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What's amazing is that a corresponding project documentation page is automatically scraped from our source code and hosted on GoDoc.org with no extra work needed on our part. So as soon as you pushed a project onto Github, you can request your project documentation on GoDoc.org website. Here is a screenshot of one.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Godoc.org for go-arrays" src="http://www.quantisan.com/images/2014/godoc_screen.png" /&gt;&lt;/p&gt;
&lt;p&gt;Because software documentation is baked into the process, I find most of the Go libraries are less frustrating to pickup.&lt;/p&gt;
&lt;h3&gt;Smart Tooling&lt;/h3&gt;
&lt;p&gt;I don't know why GoFmt isn't more common in programming. GoFmt is a tool that automatically &lt;a href="http://golang.org/cmd/gofmt/"&gt;formats Go source code&lt;/a&gt;. It is like &lt;code&gt;jshint&lt;/code&gt; or &lt;code&gt;pyflakes&lt;/code&gt; but goes an extra step further and actually fixes your code styling for you too. No more &lt;code&gt;gg=G&lt;/code&gt; in Vim.&lt;/p&gt;
&lt;p&gt;Consistent source code styling makes life so much easier when digging into other people's projects.&lt;/p&gt;
&lt;p&gt;Overall, I enjoy the workflow developing in Go. There is no interactive REPL. What you get is an almost instant &lt;code&gt;go test&lt;/code&gt; and &lt;code&gt;go run&lt;/code&gt; execution time. Coming from doing everything in Vim, switching between my editor and the command line isn't as annoying as I would have thought.&lt;/p&gt;
&lt;p&gt;One reason for that is because the workflow is different when developing in Go. GoFmt is integrated in Vim (and other typical editors); along with the fact that Go is statically typed, by the time when your code saves without error, most of the time it would work as expected. So it's not that often when I need to resort to doing &lt;code&gt;go test&lt;/code&gt; to check my code.&lt;/p&gt;
&lt;h3&gt;Go for Web Services&lt;/h3&gt;
&lt;p&gt;Having had Go in production for only a few months, our experience with Go is limited. Still, what stands out the most with Go is using it to build web services. Take our SMTP callback verification service, for example. The HTTP server code for it is &lt;a href="https://github.com/GlassyMedia/smtp-callback-verification/blob/master/web.go"&gt;under 50 lines&lt;/a&gt; using &lt;a href="https://github.com/ant0ine/go-json-rest"&gt;go-json-rest&lt;/a&gt; and a couple core packages. Not only that, Go has &lt;a href="https://github.com/GlassyMedia/smtp-callback-verification/blob/master/web_test.go"&gt;mock HTTP server testing functionality built right in&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I am aware that this is subjective. But having used a handful of languages and frameworks to build RESTful web services, Go is by far the easiest to get a server up and running.&lt;/p&gt;
&lt;h2&gt;Complementing Clojure with Go&lt;/h2&gt;
&lt;p&gt;The one time when I had to choose between Go vs. Clojure was when the Boston Go Meetup happened on the same night as the Boston Clojure Meetup.&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;.&lt;a href="https://twitter.com/BostonGolang"&gt;@bostongolang&lt;/a&gt; hmm... didn&amp;#39;t think I&amp;#39;ll have to take side Clojure vs. Go so soon&lt;/p&gt;&amp;mdash; Paul Lam (@quantisan) &lt;a href="https://twitter.com/quantisan/statuses/446389305972621312"&gt;March 19, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;Otherwise, there is no reason that Go and Clojure can't work along each other as part of a suite of toolset.&lt;/p&gt;
&lt;p&gt;Everyone has their tools of choice. Your taste and circumstance are probably different than mine. What matters is that the tools in your toolbox as a whole fit the problems that you face. Go and Clojure fill different needs for us.&lt;/p&gt;</summary><category term="golang"></category><category term="clojure"></category></entry><entry><title>More problem solving, less solution glorifying</title><link href="http://www.quantisan.com/more-problem-solving-less-solution-glorifying/" rel="alternate"></link><updated>2014-03-16T00:00:00+00:00</updated><author><name>Paul Lam</name></author><id>tag:www.quantisan.com,2014-03-16:more-problem-solving-less-solution-glorifying/</id><summary type="html">&lt;p&gt;I have been growing fond of this trendy Go programming language lately. We use it at Glassy Media to build services over HTTP and command line. So when we needed a Amazon Mechanical Turk interface I thought why not use Go for that too? I found an existing library in &lt;a href="https://github.com/crowdmob/goamz"&gt;Go for interacting with Amazon Web Services&lt;/a&gt;. But its Mechanical Turk component is incomplete. So I dove into the source code and started patching to make it work.&lt;/p&gt;
&lt;p&gt;A weekend of coding later, I still haven't finished. Then I realised what I was doing. I was building a cool solution but not actually solving the problem at hand. This might have been beneficial for a capable company to help contribute back to the open source community. But not where I'm at -- a new startup that's stretching thin on resources. We simply couldn't afford to lose focus at this phase. So I switched over to good ole Python. The &lt;a href="https://github.com/boto/boto"&gt;boto&lt;/a&gt; Python interface to AWS worked just fine. The result was that there were no "I did this in Go" blog post to write about but our problem was solved and we moved on to the next task.&lt;/p&gt;
&lt;p&gt;This sense of building cool solutions just for the sake of it seem common in tech. Just last week at a Go meetup, someone spoke about Using Reflections in Go. Even Rob Pike, the man himself, wrote that reflection "should be used with care and avoided unless strictly necessary". Somehow that was taken as a challenge.&lt;/p&gt;
&lt;p&gt;&lt;img alt="challenge accepted" src="http://www.quantisan.com/images/2014/200px-challenge-acepted.png" /&gt;&lt;/p&gt;
&lt;p&gt;I am guilty of glorifying new technologies and putting down on tried and true solutions too. On more occasions than I dare to admit at data conferences, I participated in bashing at SQL databases with the attendees. I can't speak for others, but for me it was due to ignorance. I used SQL a few times before but was put off by the data warehousing aspect of it. Having gotten more familiar with MySQL in particular over the past couple years, SQL can be simple and beautiful too. I have actually come to prefer it in some cases. Use the right tool for the right task, right?&lt;/p&gt;
&lt;p&gt;An example of focusing on solving the problem. Here is one of the distilled tech specs we have for a component.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A webpage for users to view a dataset of their private contacts&lt;/li&gt;
&lt;li&gt;Sorting capabilities on some of the data fields&lt;/li&gt;
&lt;li&gt;Expected number of contacts per user is several hundreds&lt;/li&gt;
&lt;li&gt;Limit to no more than 10 - 20 users at beta launch&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Most of the efforts went into distilling our problem to make it as easy as possible. Like letting the user edit the data? Nope. UX design? Not until we figure out what data to surface. Because the problem specs are concise, solving this is almost trivial. Our current technical stack to solve this is embarassingly simplistic:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML/CSS/Javascript for front end hosted on Heroku,&lt;/li&gt;
&lt;li&gt;Go for REST-based backend on Heroku; and&lt;/li&gt;
&lt;li&gt;Google Spreadsheet as database.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nothing fancy. Yes, we didn't even bother with spinning up a database.&lt;/p&gt;
&lt;p&gt;People build more complicated things in a hackday than this. That's because the real problem we have is that we &lt;em&gt;think&lt;/em&gt; this is needed with no real proof yet. Perhaps all they need is just having CSV files emailed to them? We tried that too. We want to get this out to our customers as soon as possible for them to use and give us feedback. What is the task that this component is doing for our customers in the scope of our product experience? Abstract problems like these are not trivial and validating them is why we are building things in a startup. Not the other way around.&lt;/p&gt;
&lt;p&gt;As I was reminiscing earlier this year, effective problem solving is more about &lt;a href="/what-i-learned-from-2-years-of-data-sciencing/"&gt;defining a clear problem than coming up with a smart solution&lt;/a&gt;. "A problem well stated is a problem half-solved." In a pursuit of the latest and greatest, I sometimes find myself swung too far in the pendulum towards &lt;a href="/event-driven-finite-state-machine-for-a-distributed-trading-system/"&gt;glorifying the solution&lt;/a&gt; rather than appreciating the effectiveness of clarifying the problem. Sometimes the best solution is to realise &lt;em&gt;not&lt;/em&gt; to do something.&lt;/p&gt;
&lt;p&gt;At this early stage of our startup, the biggest problem should clearly be shipping and learning. Being a Clojure enthusiast myself, we've only used Clojure for 2 of the dozen or so of projects shipped. Most of the rest are a mix of Python, Go, Javascript, Bash scripts, or even Google Doc macros. However, don't mistaken getting things done quickly with cutting corners or committing spaghetti code.  We are adament about keeping our software architecture as simple and decoupled as possible. If that's done right, the individual implementation don't matter because we can always rewrite any of them without impacting the system. That Mechanical Turk project? You can bet that we'll come back to refactor it later if it proves useful. Maybe we'll pick up on goamz again. But at least it's shipped now. I am focusing on the problem and not let building a startup become a technical challenge to satisfy my vanity.&lt;/p&gt;</summary><category term="problem solving"></category><category term="golang"></category></entry><entry><title>Finding Product/Market Fit Faster With Microeconomics First Principles</title><link href="http://www.quantisan.com/finding-productmarket-fit-faster-with-microeconomics-first-principles/" rel="alternate"></link><updated>2014-03-02T00:00:00+00:00</updated><author><name>Paul Lam</name></author><id>tag:www.quantisan.com,2014-03-02:finding-productmarket-fit-faster-with-microeconomics-first-principles/</id><summary type="html">&lt;p&gt;We knew early on that paying customers is the only metric that we can believe in. We have paying customers now, but we don't have a business yet until we know our product/market fit. A problem with having paying customers is that the day-to-day work of delivering and executing can drown out the big picture. Thinking in first principles helps keep us iterating towards a product/market fit while we immerse ourselves on learning from our individual customers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;matters&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;getting&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;market&lt;/span&gt; &lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;Marc&lt;/span&gt; &lt;span class="n"&gt;Andreesen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;June&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2007&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First of all, what does it getting to product/market fit mean? After some failed starts and pivots to our business, I think I sort of get it now. Here are three questions we ask ourselves to check if we are heading to a product/market fit.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Is this viable with the resources we have now?&lt;/li&gt;
&lt;li&gt;Is this profitable before our next bills arrive?&lt;/li&gt;
&lt;li&gt;Is this scalable to take us to our next stage?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One lesson we learned is to focus on the immediate future. Not 6 months down the line. Our company simply couldn't afford to try things out for 6 months with a mere chance of success. We try to find our product-market fit now to take us there, not the other way around.&lt;/p&gt;
&lt;p&gt;As I said earlier, we have a few paying customers but we still haven't found our product/market fit yet. We have a product. With a market. But not necessarily a &lt;em&gt;fit&lt;/em&gt;. A fit imples an optimal product and market match.&lt;/p&gt;
&lt;p&gt;Last week, it finally dawned on me that finding a product/market fit is an optimisation problem. What are the variables that you're optimising for?&lt;/p&gt;
&lt;p&gt;This.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Supply Demand curve" src="http://www.quantisan.com/images/2014/400px-Supply-and-demand.svg.png" /&gt;&lt;/p&gt;
&lt;p&gt;Source: &lt;a href="http://en.wikipedia.org/wiki/Supply_and_demand"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I realised that product/market fit is supply and demand in disguise. Finding a product/market fit is an exercise in finding your supply and demand curves. This puts the abstract problem of finding product/market fit into data exploration actions to take to fill a graph.&lt;/p&gt;
&lt;p&gt;Taking our startup as an example, this is our supply curve at the moment (drawn as a straight line for simplicity).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Inelastic supply curve" src="http://www.quantisan.com/images/2014/inelastic_supply_curve.png" /&gt;&lt;/p&gt;
&lt;p&gt;A bit of background. Our main product isn't a web application or a software yet, it is a service. We delivered for our first clients through hustling and manual labour. As a 3-person startup, there are only so many clients we can take on while we are developing our software tools. So our supply curve is limited by capacity and is insensitive to price.&lt;/p&gt;
&lt;p&gt;Note that there is theoretically an infinite set of options, deliverables, and products that we can offer in our market space. The lines that we draw would be different for each set. So bear in mind that this is not an academic proof but &lt;em&gt;a mental exercise&lt;/em&gt; to help us move systematically faster.&lt;/p&gt;
&lt;p&gt;Now that we have our supply curve/line, we only need the demand curve to complete this graph. This is the side of the market that we are most uncertain about. What does our client really want? How much are they willing to pay?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Supply and unknown demand curves" src="http://www.quantisan.com/images/2014/supply_unknown_demand_curve.png" /&gt;&lt;/p&gt;
&lt;p&gt;We sold to our first clients at a price point that is a fraction of industry average to get our hands dirty and to learn if we can do this (Question #1). We quickly reached our capacity and was inundated with work to deliver on our promise. But remember that our goal is to learn our supply and demand graph and not necessarily &lt;em&gt;only&lt;/em&gt; to learn about our individual customer needs. Referring to the supply and demand graph below where we undersold at a low price, yes, we learned about our work process, but we didn't learn anything about the demand curve at that price simply because we couldn't meet the demand. After we were at capacity, we stopped looking for clients for a couple weeks while we served the ones onboard.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Supply and demand at artificially low price" src="http://www.quantisan.com/images/2014/low_price_supply_demand.png" /&gt;&lt;/p&gt;
&lt;p&gt;Suppose our capacity is 3 clients at a time. If we sold at a higher price and had 3 of 10 people said yes (instead of 3 of 3 we had at a low price), we learned something about the price while still signing up to the same number of customers. Then we could adjust our price to a bit lower in the next round to find 3 of 7 people sign up instead. With a slight change in approach, we would be getting data about our demand curve while serving the same number of clients.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Supply and demand finding market price" src="http://www.quantisan.com/images/2014/market_lowq_supply_demand.png" /&gt;&lt;/p&gt;
&lt;p&gt;This is one illustration of how thinking in supply and demand can make us go faster. Now that we can rely on existing principles in our product/market search, we can do this systematically. Much smarter people have thought about microeonomics and laid the ground work for us to leverage. Hopefully we can find our product/market fit even faster with these principles in hand.&lt;/p&gt;</summary><category term="growth"></category><category term="economics"></category><category term="first principle"></category></entry><entry><title>What I learned from 2 years of 'data sciencing'</title><link href="http://www.quantisan.com/what-i-learned-from-2-years-of-data-sciencing/" rel="alternate"></link><updated>2013-12-21T00:00:00+00:00</updated><author><name>Paul Lam</name></author><id>tag:www.quantisan.com,2013-12-21:what-i-learned-from-2-years-of-data-sciencing/</id><summary type="html">&lt;p&gt;Last week was my last day at uSwitch.com. From becoming aware of &lt;em&gt;data scientist&lt;/em&gt; as a valid job title on my job offer letter, to speaking at Strata London, to signing a book deal to write about it in our book on Web Data Mining (that's progressing at a glacial pace), I figured that I should jot down some takeaway lessons while this experience is still fresh.&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;sad day today as &lt;a href="https://twitter.com/uSwitchEng"&gt;@uSwitchEng&lt;/a&gt; had to say goodbye to the amazing &lt;a href="https://twitter.com/Quantisan"&gt;@Quantisan&lt;/a&gt;. you will be missed and best of luck in the next great adventure!&lt;/p&gt;&amp;mdash; Tim Goodwin (@timrgoodwin) &lt;a href="https://twitter.com/timrgoodwin/statuses/413388484011753472"&gt;December 18, 2013&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;h2&gt;It is not about the &lt;em&gt;science&lt;/em&gt;. It is about the &lt;em&gt;data&lt;/em&gt;.&lt;/h2&gt;
&lt;p&gt;In my first year our team delivered a handful of data projects. To name just a few, we developed a dashboard showing lifetime values for all of our millions of customers, demonstrating a 6% revenue gain with a product showcase sorting algorithm modelled by the multi-armed bandit problem, and simulated offline advertising impacts to online sales for optimising marketing spending saving £20,000 a month. For various reasons, none of these projects gained traction within the company and became abandoned.&lt;/p&gt;
&lt;p&gt;Much of the efforts spent for those projects were in getting the right data into the right shape. We needed to capture events across applications on different technology stacks, associate individual events to unique customers, and being able to process all those data in an ad-hoc manner. Over the course of my first year, our team of 2 built and evolved a distributed data architecture and scalable data workflow that's based on open source tools and publications from companies like Google, LinkedIn, Twitter, etc. In fact, I scratched enough of my own itch on an open source big data processing project to become one of the maintainers for it.&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;Congratulations to &lt;a href="https://twitter.com/Quantisan"&gt;@Quantisan&lt;/a&gt; for becoming a Cascalog committer today&lt;/p&gt;&amp;mdash; Nathan Marz (@nathanmarz) &lt;a href="https://twitter.com/nathanmarz/statuses/312304668975980545"&gt;March 14, 2013&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;On a rather "by the way" note, we structured lifetime views of customer data from the disparate signals across company verticals. Words had been going around the company that we had this new business intelligence tool, more and more people asked us to help them answer questions with data on their side of the business. The data we surfaced from our data workflow satisfied a wide-spread need in the company to understand customer behaviours. Little did I know that we'll be cleaning and shaping data for most of my second year at uSwitch. Months later to recent times, our commercial team released an external data product that I can't say much but might bring in sizable benefits for the company soon.&lt;/p&gt;
&lt;p&gt;It is glamorous to talk about the latest and greatest machine learning or data visualisation. In practice, I was just cleaning and shaping data. Enabling more people to make use of deep and structured data was what delivered value to the company.&lt;/p&gt;
&lt;h2&gt;Figuring out the right problems to solve is not easy.&lt;/h2&gt;
&lt;p&gt;Had we known that customer behaviour analytics are so valuable, we would have done it earlier on (although many of the other projects were definitely a lot of fun to do). Figuring out the right work to do is one of the most difficult tasks for a data science team. It doesn't help with the fact that the data science role is so vague. Marketing think we are mining for customer insights. Developers think we're toying with Riemann, Storm, or something bleeding edge. Product managers think we are plotting graphs.&lt;/p&gt;
&lt;p&gt;Everyone has ideas but there were only 3 of us in the team. Figuring out where to devote our time and effort is not as easy as it sounds. The issue is that a new project can be almost anything. So which &lt;em&gt;one&lt;/em&gt; should we do? The paradox of choice can be confusing.&lt;/p&gt;
&lt;p&gt;Seeing that this is data science, why not dive right into the data like they would often say in hackathons? I made the mistake in the first few weeks in my data science career just hacking away with the data and then trying to persuade people to make use of the result ... somehow.&lt;/p&gt;
&lt;p&gt;Some interesting graphs came about. But as &lt;a href="https://twitter.com/dancingmango"&gt;Marc&lt;/a&gt; often like to ask, "so what?" Unless someone or something can act on the data, results can only satisfy intellectual curiosity. A business can't survive on funding people to carry out academic studies forever.&lt;/p&gt;
&lt;p&gt;Nowadays, we talk to different stakeholders to try to dig as deep as possible into their needs before any code is written for a new project. This is me handwaving. Frankly, I'm still learning my way and rely a lot on luck through trials and errors to discovering the right problems to solve.&lt;/p&gt;
&lt;h2&gt;It is a humbling experience.&lt;/h2&gt;
&lt;p&gt;Working with &lt;a href="http://oobaloo.co.uk/"&gt;Paul Ingles&lt;/a&gt; and &lt;a href="http://uk.linkedin.com/pub/abigail-lebrecht/2/95a/42"&gt;Abigail Lebrecht&lt;/a&gt; has been frustratingly awesome. Paul is opinionated about doing things as simple as possible. On more occasions than I can remember, we implemented our own little Clojure libraries because the open source ones available were "trying to do too much". Abigail is adamant about getting the data and analyses right. "What do you mean this data is only 99% correct?" Working day in and day out with Paul and Abigail showed that I had much to learn in efficient problem solving and to question all hidden assumptions.&lt;/p&gt;
&lt;p&gt;In my previous role as a biomedical engineer, I also had the opportunity to work in a multidisciplinary team. But for my &lt;a href="http://www.biomedcentral.com/content/pdf/1743-0003-5-15.pdf"&gt;haptic-robotic therapy project&lt;/a&gt;, I never even considered going into a workshop to build my robot or provide clinical therapy for the stroke patients. What multidisciplinary meant back then were a small group of professionals coming together to work on a project with each person doing different tasks to get the thing to work.&lt;/p&gt;
&lt;p&gt;The advantage of being a data scientist is that I was very hands-on in all aspects of the work. One week I might be pair programming with Paul, and fighting to keep him away from my keyboard, to integrate Riemann for monitoring our data architecture. Other days I am debating with Abigail on the data mining side. Which usually resulted from her finding flaws in the materialised tables that I produced from Cascalog, and then having to come up with a better estimation model for the missing data.&lt;/p&gt;
&lt;h2&gt;So do you want to be a data scientist?&lt;/h2&gt;
&lt;p&gt;This is it for me formally as a data scientist. I am moving back across the Atlantic to the states to cofound a new venture and continuing my journey &lt;a href="http://www.glassymedia.com"&gt;to make information accessible&lt;/a&gt;. However, back to the topic at hand. If cleaning vast amount of data, being clueless as to what to do, and debating with colleagues sound like a challenge that you want to take on, I know a company in London that's &lt;a href="http://www.uswitch.com/careers/"&gt;looking for a data scientist&lt;/a&gt;!&lt;/p&gt;</summary></entry><entry><title>Event-driven finite state machine for a distributed trading system</title><link href="http://www.quantisan.com/event-driven-finite-state-machine-for-a-distributed-trading-system/" rel="alternate"></link><updated>2013-05-20T00:00:00+01:00</updated><author><name>Paul Lam</name></author><id>tag:www.quantisan.com,2013-05-20:event-driven-finite-state-machine-for-a-distributed-trading-system/</id><summary type="html">&lt;p&gt;One problem I had when building my distributed trading system is managing states asynchronously from multiple triggers. For example, when the alpha engine say &lt;em&gt;buy&lt;/em&gt;, it needs confirmation from the position engine to see if it is safe to enter a new position. I could chain one check after another imperatively or via callbacks. However, the underlying constraint is that these triggers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;are resource-intensive to generate,&lt;/li&gt;
&lt;li&gt;might need to compose many of them,&lt;/li&gt;
&lt;li&gt;not sequential or have one-to-one depencency, and&lt;/li&gt;
&lt;li&gt;most importantly, they are in separate programs or different machines&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thus I've opted to abstract this problem out into its own module of the system as an event-driven finite state machine (FSM) to keep track of state transitions. Intimidating term, but my first implementation was just if-else statements to qualify as such. The benefit is that each of my system's components only need to push signals and pull states from a central interface without having to worry about what should it call next or poll anything else to see if the stars are aligned. That drastically simplified development and maintenance.&lt;/p&gt;
&lt;p&gt;The responsiblities of my FSM module are to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;listen to all the signals,&lt;/li&gt;
&lt;li&gt;figure out all the transitions, and&lt;/li&gt;
&lt;li&gt;publish the latest states for the rest of the system.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Handling asynchronous events&lt;/h2&gt;
&lt;p&gt;I use RabbitMQ as the message transport layer between my system's modules. All I need to do here is to associate an appropriate message handler to each triggering input for the FSM. Here's one example of the event handlers using the &lt;a href="http://clojurerabbitmq.info/"&gt;Clojure RabbitMQ library, Langohr&lt;/a&gt;. The rest of this part are just standard RabbitMQ publish/subscribe stuff.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn- &lt;/span&gt;&lt;span class="nv"&gt;event-message-handler&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;ch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:keys&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;headers&lt;/span&gt; &lt;span class="nv"&gt;delivery-tag&lt;/span&gt; &lt;span class="nv"&gt;redelivery?&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="nv"&gt;bytes&lt;/span&gt; &lt;span class="nv"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:keys&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;message-type&lt;/span&gt; &lt;span class="nv"&gt;user-id&lt;/span&gt; &lt;span class="nv"&gt;instrument&lt;/span&gt; &lt;span class="nv"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;read-payload&lt;/span&gt; &lt;span class="nv"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="ss"&gt;:position-event&lt;/span&gt; &lt;span class="nv"&gt;message-type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-cached-states&lt;/span&gt; &lt;span class="nv"&gt;user-id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;update-position-state&lt;/span&gt; &lt;span class="nv"&gt;instrument&lt;/span&gt; &lt;span class="nv"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cache-states&lt;/span&gt; &lt;span class="nv"&gt;user-id&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;lbc/ack&lt;/span&gt; &lt;span class="nv"&gt;ch&lt;/span&gt; &lt;span class="nv"&gt;delivery-tag&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is called when a position event is received with information such as user, instrument, and quantity. This handler would thread these information by fetching current states for that user, evaluate next state with input, and then cache the new states for the user.&lt;/p&gt;
&lt;h2&gt;State transitions&lt;/h2&gt;
&lt;p&gt;Below is one of my system's state transition diagrams.&lt;/p&gt;
&lt;p&gt;&lt;img alt="state transition example" src="http://www.quantisan.com/images/2013/qte_state_diagram.png" /&gt;&lt;/p&gt;
&lt;p&gt;There are 4 states represented by 4 colours with 4 triggers signalling state transition. The program is expected to handle up to hundreds of independent states concurrently with event triggers coming in a couple times per second.&lt;/p&gt;
&lt;p&gt;As I was saying, my first implementation is just a set of if-else methods. For example, an &lt;code&gt;engage&lt;/code&gt; trigger would call the &lt;code&gt;engaging&lt;/code&gt; method to determine the next state given the implicit input &lt;code&gt;engage&lt;/code&gt; and current state.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;engaging&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;current&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;condp&lt;/span&gt; &lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="nv"&gt;current&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;white&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;yellow&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;yellow&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;white&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;green&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;red&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;green&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There were a handful of these boilerplate code. So after I deployed my system I came back to refactor them. I've been meaning to give core.logic a try for a while so this seem like a good place to start using it.&lt;/p&gt;
&lt;p&gt;Before we can ask the logic solver question we need to define relations. Here I define a &lt;code&gt;transition&lt;/code&gt; relation to specify all the state transition definition conveniently in one place.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defrel&lt;/span&gt; &lt;span class="nv"&gt;transition&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;input&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;facts&lt;/span&gt; &lt;span class="nv"&gt;transition&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nv"&gt;nil&lt;/span&gt; &lt;span class="ss"&gt;:open&lt;/span&gt; &lt;span class="ss"&gt;:green&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;nil&lt;/span&gt; &lt;span class="ss"&gt;:close&lt;/span&gt; &lt;span class="ss"&gt;:white&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:white&lt;/span&gt; &lt;span class="ss"&gt;:engage&lt;/span&gt; &lt;span class="ss"&gt;:yellow&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:white&lt;/span&gt; &lt;span class="ss"&gt;:disengage&lt;/span&gt; &lt;span class="ss"&gt;:white&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:white&lt;/span&gt; &lt;span class="ss"&gt;:open&lt;/span&gt; &lt;span class="ss"&gt;:green&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:white&lt;/span&gt; &lt;span class="ss"&gt;:close&lt;/span&gt; &lt;span class="ss"&gt;:white&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:yellow&lt;/span&gt; &lt;span class="ss"&gt;:engage&lt;/span&gt; &lt;span class="ss"&gt;:white&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:yellow&lt;/span&gt; &lt;span class="ss"&gt;:disengage&lt;/span&gt; &lt;span class="ss"&gt;:white&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:yellow&lt;/span&gt; &lt;span class="ss"&gt;:open&lt;/span&gt; &lt;span class="ss"&gt;:green&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:yellow&lt;/span&gt; &lt;span class="ss"&gt;:close&lt;/span&gt; &lt;span class="ss"&gt;:yellow&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:green&lt;/span&gt; &lt;span class="ss"&gt;:engage&lt;/span&gt; &lt;span class="ss"&gt;:red&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:green&lt;/span&gt; &lt;span class="ss"&gt;:disengage&lt;/span&gt; &lt;span class="ss"&gt;:red&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:green&lt;/span&gt; &lt;span class="ss"&gt;:open&lt;/span&gt; &lt;span class="ss"&gt;:green&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:green&lt;/span&gt; &lt;span class="ss"&gt;:close&lt;/span&gt; &lt;span class="ss"&gt;:yellow&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:red&lt;/span&gt; &lt;span class="ss"&gt;:engage&lt;/span&gt; &lt;span class="ss"&gt;:green&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:red&lt;/span&gt; &lt;span class="ss"&gt;:disengage&lt;/span&gt; &lt;span class="ss"&gt;:red&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:red&lt;/span&gt; &lt;span class="ss"&gt;:open&lt;/span&gt; &lt;span class="ss"&gt;:red&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:red&lt;/span&gt; &lt;span class="ss"&gt;:close&lt;/span&gt; &lt;span class="ss"&gt;:white&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the event handler methods are just wrappers for a one-liner logic expression asking the question -- given current stage, &lt;code&gt;cur-state&lt;/code&gt;, and input trigger, &lt;code&gt;input&lt;/code&gt;, what state can &lt;code&gt;q&lt;/code&gt; take to satisfy this constraint?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;next-state&lt;/span&gt; 
  &lt;span class="s"&gt;&amp;quot;Solver for next state&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;input&lt;/span&gt; &lt;span class="nv"&gt;cur-state&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;first &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;q&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;transition&lt;/span&gt; &lt;span class="nv"&gt;cur-state&lt;/span&gt; &lt;span class="nv"&gt;input&lt;/span&gt; &lt;span class="nv"&gt;q&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;colour-clicked&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;partial &lt;/span&gt;&lt;span class="nv"&gt;next-state&lt;/span&gt; &lt;span class="ss"&gt;:engage&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;colour-deactivate&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;partial &lt;/span&gt;&lt;span class="nv"&gt;next-state&lt;/span&gt; &lt;span class="ss"&gt;:disengage&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;next-position-colour&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;cur&lt;/span&gt; &lt;span class="nv"&gt;open?&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="nv"&gt;open?&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;next-state&lt;/span&gt; &lt;span class="ss"&gt;:open&lt;/span&gt; &lt;span class="nv"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;next-state&lt;/span&gt; &lt;span class="ss"&gt;:close&lt;/span&gt; &lt;span class="nv"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not the most illustrative core.logic example but it does the job.&lt;/p&gt;
&lt;p&gt;Getting started with core.logic is surprisingly easy. I went through the &lt;a href="https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer"&gt;Primer&lt;/a&gt; and &lt;a href="https://github.com/swannodette/logic-tutorial"&gt;tutorial&lt;/a&gt; and got this working in one try.&lt;/p&gt;
&lt;h2&gt;State caching and sharing&lt;/h2&gt;
&lt;p&gt;Now that the state transition have been taken care of, states are cached and served on Redis for other parts of the system. I use Redis for this because it is fast and easy. Values are stored in &lt;a href="https://github.com/edn-format/edn"&gt;edn format&lt;/a&gt; instead of something more popular like JSON to maintain data structure through the wire.&lt;/p&gt;
&lt;p&gt;This is my first time using edn in production. All inter-process messages in this trading system are edn formatted. It works seamlessly with Clojure by simply using &lt;code&gt;str&lt;/code&gt; to write and &lt;code&gt;clojure.edn/read-string&lt;/code&gt; to read. Besides my other Clojure components in the system, my trade broker interface is written in Java. My Java program use &lt;a href="https://github.com/bpsm/edn-java"&gt;edn-java&lt;/a&gt; to parse and unparse complex Clojure data structures (e.g. nested maps with keywords).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;pool&lt;/span&gt;         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;car/make-conn-pool&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;spec-server1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;car/make-conn-spec&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defmacro &lt;/span&gt;&lt;span class="nv"&gt;with-car&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;car/with-conn&lt;/span&gt; &lt;span class="nv"&gt;pool&lt;/span&gt; &lt;span class="nv"&gt;spec-server1&lt;/span&gt; &lt;span class="o"&gt;~@&lt;/span&gt;&lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;get-cached-states&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;Generate edn from database.&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;edn/read-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;with-car&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;car/get&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;states:&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;cache-states&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;m&lt;/span&gt; &lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;with-car&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;car/set&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;states:&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str &lt;/span&gt;&lt;span class="nv"&gt;m&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I find coupling edn with Redis is a fantastic choice as it's almost like working with Clojure's native concurrency data structures, such as &lt;code&gt;atom&lt;/code&gt;, but also enable external programs to access the data.&lt;/p&gt;
&lt;h2&gt;Simple and quick&lt;/h2&gt;
&lt;p&gt;The entire event-driven FSM program is less than 200 lines of Clojure code and took no more than a few hours to do. However, I did give it some pondering time for a few days. I haven't done any benchmark to estimate performance result. So all I can say is that this setup can handle my simplistic use case with barely any load on the server so I'm happy with it.&lt;/p&gt;
&lt;p&gt;A few years ago, I would have set a whole bunch of flags to switch states. In fact, &lt;a href="https://github.com/Quantisan/JFFramework"&gt;that's what I did&lt;/a&gt;. The biggest satisfaction here for me isn't the implementation or technologies, it is seeing through the underlying problem at hand and solving it with a common pattern that made my work simpler.&lt;/p&gt;</summary><category term="clojure"></category><category term="logic programming"></category><category term="event-driven"></category><category term="distributed"></category><category term="redis"></category></entry><entry><title>Post gone viral, 16000 visitors in a day, how many actually read the article?</title><link href="http://www.quantisan.com/post-gone-viral-16000-visitors-in-a-day-how-many-actually-read-the-article/" rel="alternate"></link><updated>2013-05-12T11:30:00+01:00</updated><author><name>Paul Lam</name></author><id>tag:www.quantisan.com,2013-05-12:post-gone-viral-16000-visitors-in-a-day-how-many-actually-read-the-article/</id><summary type="html">&lt;p&gt;Edit: A few people have &lt;a href="https://news.ycombinator.com/item?id=5693881"&gt;pointed out&lt;/a&gt; that my assumption about the Analytics engagement metric &lt;em&gt;might be&lt;/em&gt; wrong because single page hit &lt;em&gt;could be&lt;/em&gt; counted as zero on engagement time. I'll make an update to this post when smarter people than me on HN can agree on a metric. So I open this problem to Analytics expert, how can I discern readership ratio from Analytics data?&lt;/p&gt;
&lt;p&gt;My reminiscing post about &lt;a href="/how-a-few-screws-cost-2000-and-a-240gb-multinodes-cluster-cost-50/"&gt;my time as an aerospace engineer versus software&lt;/a&gt; was on the front page of Hacker News for about 12 hours on Friday. That garnered 16,374 unique visitors to this site on that single day. However, Google Analytics data say that only 975 of those people spent more than 10 seconds here. Given that there's 652 words in that viral post, I doubt anyone can actually read it within that time. If we assume that only people spending more than 10 seconds have meaningfully read the article, it appears that only 6% of traffic are &lt;em&gt;real&lt;/em&gt; readers from this Hacker News blitz.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Viral post visitors engagement" src="http://www.quantisan.com/images/2013/10052013_analytics_engagement.png" /&gt;&lt;/p&gt;
&lt;p&gt;Given that my usual stats is above 10%, viral traffic audience is understandably less targeted but isn't abysmal by comparison. However, as a data scientist, I'm obliged to say that as this is an one-off event, we couldn't draw a statistically significant observation from it.&lt;/p&gt;
&lt;p&gt;Interestingly, overall traffic the day after on Saturday is back down to 901 visits. And engagement for those spending more than 10 seconds is up at 8.3%. These residual traffic are coming in from domains like Twitter and link sharers.&lt;/p&gt;</summary><category term="data"></category><category term="marketing"></category><category term="viral"></category><category term="analytics"></category></entry><entry><title>How a few screws cost $2000 and a 240GB multinodes cluster cost $50</title><link href="http://www.quantisan.com/how-a-few-screws-cost-2000-and-a-240gb-multinodes-cluster-cost-50/" rel="alternate"></link><updated>2013-05-10T08:30:00+01:00</updated><author><name>Paul Lam</name></author><id>tag:www.quantisan.com,2013-05-10:how-a-few-screws-cost-2000-and-a-240gb-multinodes-cluster-cost-50/</id><summary type="html">&lt;p&gt;About ten years ago I was an electrical engineering intern at MDA Space Robotics. They are the company that designed the Canadarm 1 and 2 used on the International Space Station. I still remember meeting the R&amp;amp;D team next door to see their demo of a 3D LIDAR system mounted on a Mars Rover model. It was one of the competing designs to serve as the eyes of the rover. To put this into perspective, this was at a time when a single-beam scanning laser was common on a robot to gauge distances. Seeing a vision system which can generate 3D polygons of the terrain in real-time for navigation was just unbelievable.&lt;/p&gt;
&lt;p&gt;As for our mundane electronics team, we were designing new power electronics to upgrade the Canadarm2. Obviously, I didn't actually contribute much as an intern. One project which I had my hands on was building loading circuits to simulate the electrical response of the motors on the Canadarm2. So that we can test the new power electronics with live circuit without having motors spinning in the lab. For my particular role, I didn't do any of that either. What I did was design and build safety housing for these big loading circuits.&lt;/p&gt;
&lt;p&gt;Normally, this wouldn't take more than a couple days in a workshop. Not so in a regulated industry. Even though these boxes were only used as a superficial safety mechanism during ground support testing and were never going to be used in production or have anything to do with the actual test itself, we still needed to follow proper engineering guidelines because my mentor told me that it's safer to have a blanket rule for every component than nit-pick what is or isn't regulated.&lt;/p&gt;
&lt;p&gt;After designing the housing in no time (it's just a rectangular shell to cover the circuit, how hard can it be?), I sourced a contractor to mold these polycarbonate shells for us. That's the same material hockey masks use because it's transparent and strong. To secure the shell onto the loading circuit, which are about as big as a moving box each, I needed big screws to bolt it on the baseboard. Seeing that we're an electrical team, we didn't have suitable screws for it in the lab. I figured I should just drive down to Home Depot to buy them.&lt;/p&gt;
&lt;p&gt;Not so fast. Apparently, as I was technically sourcing in a new component, I couldn't just go down the street and get them. I ended up having to order from one of our approved suppliers and had them shipped to us overnight. Not that I was in any hurry. It's because we did all shipping by courier. And even though I needed just a few screws, the supplier don't do small orders either so I had to order the minimum of a hundred or something. Still, all of that didn't really cost that much. The majority of the cost came from my hours spent in getting technical and administrative approvals for adding this new component into our bill of material.&lt;/p&gt;
&lt;p&gt;And so that is how I ended up spending the company around $2000 on a few screws. I never saw an itemised bill for those screws. But I figured that's about right based on hours spent and people's estimated salaries.&lt;/p&gt;
&lt;p&gt;This forgotten story from my engineering days came about this week as &lt;a href="http://oobaloo.co.uk/"&gt;my colleague Paul&lt;/a&gt; and I were spiking out a big data project on Amazon Redshift. On a whim just for the sake of it, we launched a 32 virtual cores, 240GB memory, 32TB storage multi-node cluster with literally just the click of a button. We played with it for a couple hours, did what was needed, and decommissioned the cloud servers. It cost us $45.&lt;/p&gt;
&lt;p&gt;What is my point of the stories? Same concept of materialising an idea. Different time, different industry. Diametrically different prototyping experience.&lt;/p&gt;
&lt;p&gt;Update: this post generated some heated &lt;a href="https://news.ycombinator.com/item?id=5685078"&gt;debates on Hacker News&lt;/a&gt;.&lt;/p&gt;</summary><category term="prototyping"></category><category term="engineering"></category><category term="redshift"></category></entry><entry><title>What should I work on next for Cascalog?</title><link href="http://www.quantisan.com/what-should-i-work-on-next-for-cascalog/" rel="alternate"></link><updated>2013-05-08T21:40:00+01:00</updated><author><name>Paul Lam</name></author><id>tag:www.quantisan.com,2013-05-08:what-should-i-work-on-next-for-cascalog/</id><summary type="html">&lt;p&gt;Too many things to do, too little time. I figured we can do this in a data-driven way. So here's a poll. Please only submit an entry if you use Cascalog. And only one per person. Let's see if an honour system would work.&lt;/p&gt;
&lt;iframe src="https://docs.google.com/a/quantisan.com/spreadsheet/embeddedform?formkey=dGtBNF96bExZZ0E0X0p5ZUFTb2NyTkE6MQ" width="580" height="500" frameborder="0" marginheight="0" marginwidth="0"&gt;Loading...&lt;/iframe&gt;

&lt;h2&gt;Poll result one week later&lt;/h2&gt;
&lt;p&gt;&lt;img alt="poll result" src="http://www.quantisan.com/images/2013/cascalog_poll_graph.png" /&gt;&lt;/p&gt;
&lt;table&gt;
    &lt;tr&gt;&lt;th&gt;Votes&lt;/th&gt; &lt;th&gt;Choice&lt;/th&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;15&lt;/td&gt; &lt;td&gt;Self-contained documentation site, e.g. http://cascalog.quantisan.com (demo address only)&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;10&lt;/td&gt; &lt;td&gt;Improve and consolidate guides into Github wiki&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;11&lt;/td&gt; &lt;td&gt;Bring Cascalog to Cascading 2.1/2.2&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;8&lt;/td&gt; &lt;td&gt;Fix open issues&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;13&lt;/td&gt; &lt;td&gt;Add features and performance increase, e.g. new logic solver, make use of new Cascading features since 2.0&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;2&lt;/td&gt; &lt;td&gt;Other&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;One person voted for integrating other machine learning library into Cascalog and another to &lt;a href="https://github.com/nathanmarz/storm/issues/115"&gt;isolate system library&lt;/a&gt;.&lt;/p&gt;</summary><category term="cascalog"></category></entry><entry><title>Securing a fresh Ubuntu server with Fabric tasks</title><link href="http://www.quantisan.com/securing-a-fresh-ubuntu-server-with-fabric-tasks/" rel="alternate"></link><updated>2013-05-06T08:34:00+01:00</updated><author><name>Paul Lam</name></author><id>tag:www.quantisan.com,2013-05-06:securing-a-fresh-ubuntu-server-with-fabric-tasks/</id><summary type="html">&lt;p&gt;An administrative task that I've done countless number of times is spinning up new servers to host applications like a web dashboard or a trading engine. At uSwitch my colleagues use Puppet and other smart devops tools that I have no idea about to automate our infrastructure. For my own work I just need an easy tool to run some commands over ssh. I chose to use &lt;a href="http://docs.fabfile.org/"&gt;Fabric&lt;/a&gt; to automate this repetitive but necessary task of hardening a fresh Ubuntu server. Now that I have this set of Fabric tasks, after I create a new instance, I can just run a single Fabric task and the server would be configured properly for use.&lt;/p&gt;
&lt;p&gt;The choice for Fabric is because I've been using Fabric for some time already to perform simple deployment tasks. Then I stumbled on &lt;a href="https://niteowebfabfile.readthedocs.org/en/latest/_modules/niteoweb/fabfile/server.html"&gt;an open-source project&lt;/a&gt; that actually configures an Ubuntu server using Fabric. Much of these scripts are based on that source. Automating these tasks saves me a lot of time and ensures consistency of configurations. Perhaps when the need arises, I should look into other tools like &lt;a href="http://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt; too.&lt;/p&gt;
&lt;p&gt;Here are some basic tasks that I perform on a new Ubuntu 12.04 server and the corresponding Fabric task script.&lt;/p&gt;
&lt;h2&gt;Create an administrator account&lt;/h2&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.contrib.files&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;append&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.contrib.files&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sed&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.contrib.files&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;exists&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.operations&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_admin_account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Create an account for an admin to use to access the server.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;root&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;default_password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;default_password&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;default_password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# create user&lt;/span&gt;
    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;egrep &lt;/span&gt;&lt;span class="si"&gt;%(admin)s&lt;/span&gt;&lt;span class="s"&gt; /etc/passwd || adduser &lt;/span&gt;&lt;span class="si"&gt;%(admin)s&lt;/span&gt;&lt;span class="s"&gt; --disabled-password --gecos &amp;quot;&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# add public key for SSH access&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/home/&lt;/span&gt;&lt;span class="si"&gt;%(admin)s&lt;/span&gt;&lt;span class="s"&gt;/.ssh&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mkdir /home/&lt;/span&gt;&lt;span class="si"&gt;%(admin)s&lt;/span&gt;&lt;span class="s"&gt;/.ssh&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pub&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Paste &lt;/span&gt;&lt;span class="si"&gt;%(admin)s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;s public key: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;echo &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%(pub)s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; &amp;gt; /home/&lt;/span&gt;&lt;span class="si"&gt;%(admin)s&lt;/span&gt;&lt;span class="s"&gt;/.ssh/authorized_keys&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# allow this user in sshd_config&lt;/span&gt;
    &lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/etc/ssh/sshd_config&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;AllowUsers &lt;/span&gt;&lt;span class="si"&gt;%(admin)s&lt;/span&gt;&lt;span class="s"&gt;@*&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use_sudo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# allow sudo for maintenance user by adding it to &amp;#39;sudo&amp;#39; group&lt;/span&gt;
    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;gpasswd -a &lt;/span&gt;&lt;span class="si"&gt;%(admin)s&lt;/span&gt;&lt;span class="s"&gt; sudo&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# set default password for initial login&lt;/span&gt;
    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;echo &amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%(admin)s&lt;/span&gt;&lt;span class="s"&gt;:&lt;/span&gt;&lt;span class="si"&gt;%(default_password)s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; | chpasswd&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;harden ssh server&lt;/h2&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;harden_sshd&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Security harden sshd.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="c"&gt;# Disable password authentication&lt;/span&gt;
    &lt;span class="n"&gt;sed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/etc/ssh/sshd_config&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;#PasswordAuthentication yes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;PasswordAuthentication no&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;use_sudo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# Deny root login&lt;/span&gt;
    &lt;span class="n"&gt;sed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/etc/ssh/sshd_config&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;PermitRootLogin yes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;PermitRootLogin no&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;use_sudo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;restart ssh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;setup firewall&lt;/h2&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;install_ufw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rules&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Install and configure Uncomplicated Firewall.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;apt-get update&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;apt-get -yq install ufw&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;configure_ufw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;configure_ufw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rules&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Configure Uncomplicated Firewall.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c"&gt;# reset rules so we start from scratch&lt;/span&gt;
    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ufw --force reset&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;rules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rules&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rules&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;env.rules must be set&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rule&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# re-enable firewall and print rules&lt;/span&gt;
    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ufw --force enable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ufw status verbose&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;time synchronisation daemon&lt;/h2&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_system_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Set timezone and install ``ntp`` to keep time accurate.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;timezone&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/usr/share/zoneinfo/UTC&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# set timezone&lt;/span&gt;
    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cp &lt;/span&gt;&lt;span class="si"&gt;%(timezone)s&lt;/span&gt;&lt;span class="s"&gt; /etc/localtime&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# install NTP&lt;/span&gt;
    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;apt-get -yq install ntp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;enable unattended upgrades&lt;/h2&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;install_unattended_upgrades&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Configure Ubuntu to automatically install security updates.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;env.email must be set&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;apt-get -yq install unattended-upgrades&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/etc/apt/apt.conf.d/50unattended-upgrades&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;//Unattended-Upgrade::Mail &amp;quot;root@localhost&amp;quot;;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;Unattended-Upgrade::Mail &amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%(email)s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;use_sudo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;sed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/etc/apt/apt.conf.d/20auto-upgrades&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;APT::Periodic::Update-Package-Lists &amp;quot;0&amp;quot;;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;APT::Periodic::Update-Package-Lists &amp;quot;1&amp;quot;;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;use_sudo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/etc/apt/apt.conf.d/20auto-upgrades&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="s"&gt;&amp;#39;APT::Periodic::Unattended-Upgrade &amp;quot;1&amp;quot;;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="n"&gt;use_sudo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="devops"></category><category term="Ubuntu"></category><category term="server"></category></entry><entry><title>Minimal variance asset allocation for Stocks ISA</title><link href="http://www.quantisan.com/minimal-variance-asset-allocation-for-stocks-isa/" rel="alternate"></link><updated>2013-01-31T12:30:00+00:00</updated><author><name>Paul Lam</name></author><id>tag:www.quantisan.com,2013-01-31:minimal-variance-asset-allocation-for-stocks-isa/</id><summary type="html">&lt;p&gt;With interest rate in the UK so pathetically low, I thought I might take some chance by making use of a Stocks ISA account in the UK. The problem though, is that I have no knowledge about the London stock market nor do I have the time to follow it. So I wrote a program to pick some Exchange Traded Funds (ETFs) with a primary goal to minimise risk and opportunity costs.&lt;/p&gt;
&lt;p&gt;Here are what I wanted to achieve:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;only a few trades at most a year&lt;/li&gt;
&lt;li&gt;less risk than FTSE100&lt;/li&gt;
&lt;li&gt;more yield than a laddered government bonds portfolio&lt;/li&gt;
&lt;li&gt;require less than an hour per month of maintenance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically, this is a computer-assisted passive investment portfolio.&lt;/p&gt;
&lt;p&gt;The first step is to scrape all the ETF symbols from London Stock Exchange on &lt;a href="http://www.londonstockexchange.com/exchange/prices-and-markets/ETFs/ETFs.html"&gt;these pages&lt;/a&gt;. I use &lt;code&gt;getNodeSet&lt;/code&gt; from &lt;code&gt;XML&lt;/code&gt; package in R to select the relevant data from the HTML page with XPath.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;page &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; getURL&lt;span class="p"&gt;(&lt;/span&gt;url&lt;span class="p"&gt;,&lt;/span&gt; curl&lt;span class="o"&gt;=&lt;/span&gt;curl&lt;span class="p"&gt;)&lt;/span&gt;
tree &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; htmlTreeParse&lt;span class="p"&gt;(&lt;/span&gt;page&lt;span class="p"&gt;,&lt;/span&gt; useInternalNodes&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
xpath &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;//table[@class = &amp;#39;table_dati&amp;#39;]/tbody&amp;quot;&lt;/span&gt;
node &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; getNodeSet&lt;span class="p"&gt;(&lt;/span&gt;tree&lt;span class="p"&gt;,&lt;/span&gt; xpath&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This program only considers ETF because this portfolio is to diversify risk and not pick &lt;em&gt;winning&lt;/em&gt; stocks. ETFs provide &lt;a href="http://www.economist.com/news/finance-and-economics/21570711-anniversary-successful-financial-innovation-twenty-years-young"&gt;convenient exposure to various asset classes such as equities, bonds, and commodities at low costs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next is to scrape profile information for each symbol from Yahoo. We want data such as the fund's expense ratio and asset class category.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;url &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; paste&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://finance.yahoo.com/q/pr?s=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; symbol&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;+Profile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; sep&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
tree &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; htmlTreeParse&lt;span class="p"&gt;(&lt;/span&gt;url&lt;span class="p"&gt;,&lt;/span&gt; useInternalNodes&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
xpath &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;//table[contains(concat(&amp;#39; &amp;#39;, @class, &amp;#39; &amp;#39;), &amp;#39; yfnc_datamodoutline1 &amp;#39;)]/tr/td/table&amp;quot;&lt;/span&gt;
node &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; getNodeSet&lt;span class="p"&gt;(&lt;/span&gt;tree&lt;span class="p"&gt;,&lt;/span&gt; xpath&lt;span class="p"&gt;)&lt;/span&gt;

operation &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; tryCatch&lt;span class="p"&gt;(&lt;/span&gt;readHTMLTable&lt;span class="p"&gt;(&lt;/span&gt;node&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]]),&lt;/span&gt; error &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;e&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kc"&gt;NA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
overview &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; tryCatch&lt;span class="p"&gt;(&lt;/span&gt;readHTMLTable&lt;span class="p"&gt;(&lt;/span&gt;node&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]),&lt;/span&gt; error &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;e&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kc"&gt;NA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once the funds' fundamental data are fetched, we can do a preliminary screening. I am filtering for:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Actively traded funds,&lt;/li&gt;
&lt;li&gt;Sufficient age (3 years), and&lt;/li&gt;
&lt;li&gt;Only the best 3 expense ratio efficiency from each class&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That last point is particularly important as illustrated in this plot.&lt;/p&gt;
&lt;p&gt;&lt;img alt="London funds expense by category" src="http://www.quantisan.com/images/2013/london_etf_mer_category.png" /&gt;&lt;/p&gt;
&lt;p&gt;The above plot couldn't fit in this frame but it shows that expense ratios are all over the place. What matters is that the raw data is available for use.&lt;/p&gt;
&lt;p&gt;The plot below is clearer. It shows expense ratio by the fund's issuer. You can see that Vanguard funds generally have the best expense ratio as is commonly known.&lt;/p&gt;
&lt;p&gt;&lt;img alt="London funds expense by issuer" src="http://www.quantisan.com/images/2013/london_etf_mer.png" /&gt;&lt;/p&gt;
&lt;p&gt;The initial ETF list has 667 funds in 104 categories. The screened list narrows it down to 20 funds in 18 categories. Most that were screened are niche funds such as Islamic Global Equity and regional real estate funds.&lt;/p&gt;
&lt;p&gt;Out of that 20 funds, I apply the popular &lt;a href="http://en.wikipedia.org/wiki/Modern_portfolio_theory"&gt;Modern Portfolio Theory&lt;/a&gt; to minimise risk using historical quotes data with &lt;code&gt;quantmod&lt;/code&gt;'s Yahoo data fetcher. Given the expected returns of each asset, &lt;code&gt;er&lt;/code&gt; and their covariance matrix, &lt;code&gt;cov.mat&lt;/code&gt;, a long-only efficient portfolio weighting of those assets can be solved with quadratic programming like so.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Dmat &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;cov.mat
dvec &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; rep.int&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; N&lt;span class="p"&gt;)&lt;/span&gt;
Amat &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; cbind&lt;span class="p"&gt;(&lt;/span&gt;rep&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;N&lt;span class="p"&gt;),&lt;/span&gt; er&lt;span class="p"&gt;,&lt;/span&gt; diag&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;N&lt;span class="p"&gt;))&lt;/span&gt;
bvec &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; target.return&lt;span class="p"&gt;,&lt;/span&gt; rep&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;N&lt;span class="p"&gt;))&lt;/span&gt;
result &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; solve.QP&lt;span class="p"&gt;(&lt;/span&gt;Dmat&lt;span class="o"&gt;=&lt;/span&gt;Dmat&lt;span class="p"&gt;,&lt;/span&gt;dvec&lt;span class="o"&gt;=&lt;/span&gt;dvec&lt;span class="p"&gt;,&lt;/span&gt;Amat&lt;span class="o"&gt;=&lt;/span&gt;Amat&lt;span class="p"&gt;,&lt;/span&gt;bvec&lt;span class="o"&gt;=&lt;/span&gt;bvec&lt;span class="p"&gt;,&lt;/span&gt;meq&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To get these weightings,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;IGLT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;   &lt;span class="n"&gt;MIDD&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;   &lt;span class="n"&gt;INXG&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;   &lt;span class="n"&gt;EQQQ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;   &lt;span class="n"&gt;SLXX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;   &lt;span class="n"&gt;IBGS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;   &lt;span class="n"&gt;IUKP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;   &lt;span class="n"&gt;LUK2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt; 
&lt;span class="mf"&gt;0.603023&lt;/span&gt; &lt;span class="mf"&gt;0.122829&lt;/span&gt; &lt;span class="mf"&gt;0.116879&lt;/span&gt; &lt;span class="mf"&gt;0.084122&lt;/span&gt; &lt;span class="mf"&gt;0.037906&lt;/span&gt; &lt;span class="mf"&gt;0.017975&lt;/span&gt; &lt;span class="mf"&gt;0.014051&lt;/span&gt; &lt;span class="mf"&gt;0.003215&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But here's the catch, this mean-variance optimisation approach which I'm using does not work in the real-world. The problem is that it optimises for historical data under simplistic assumptions. For potential improvements on this model, start with &lt;a href="http://quant.stackexchange.com/questions/44/what-methods-do-you-use-to-improve-expected-return-estimates-when-constructing-a"&gt;this Q&amp;amp;A on StackExchange&lt;/a&gt; but be warned that it's a rabbit hole to go down in.&lt;/p&gt;
&lt;p&gt;Knowing that I shouldn't trust this model much, I do this a couple times under different scenarios on the efficient frontier and union the top weighted assets from each run as a compensation by sampling.&lt;/p&gt;
&lt;p&gt;The result is a suggestion of six ETFs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Symbol&lt;/span&gt;            &lt;span class="n"&gt;Name&lt;/span&gt;                   &lt;span class="n"&gt;category&lt;/span&gt;
&lt;span class="n"&gt;BRIC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;    &lt;span class="n"&gt;ISHARESII&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;                &lt;span class="n"&gt;BRIC&lt;/span&gt; &lt;span class="n"&gt;Equity&lt;/span&gt;
&lt;span class="n"&gt;EQQQ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;   &lt;span class="n"&gt;POWERSHS&lt;/span&gt; &lt;span class="n"&gt;EQQQ&lt;/span&gt; &lt;span class="n"&gt;US&lt;/span&gt; &lt;span class="n"&gt;Large&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Cap&lt;/span&gt; &lt;span class="n"&gt;Growth&lt;/span&gt; &lt;span class="n"&gt;Equity&lt;/span&gt;
&lt;span class="n"&gt;IGLS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="n"&gt;ISHARESIII&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="err"&gt;£&lt;/span&gt;        &lt;span class="n"&gt;GBP&lt;/span&gt; &lt;span class="n"&gt;Government&lt;/span&gt; &lt;span class="n"&gt;Bond&lt;/span&gt;
&lt;span class="n"&gt;INXG&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="n"&gt;GBP&lt;/span&gt; &lt;span class="n"&gt;IDX&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;LNK&lt;/span&gt; &lt;span class="n"&gt;GLT&lt;/span&gt;  &lt;span class="n"&gt;GBP&lt;/span&gt; &lt;span class="n"&gt;Inflation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Linked&lt;/span&gt; &lt;span class="n"&gt;Bond&lt;/span&gt;
&lt;span class="n"&gt;MIDD&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;  &lt;span class="n"&gt;ISHARESFTSE250&lt;/span&gt;          &lt;span class="n"&gt;UK&lt;/span&gt; &lt;span class="n"&gt;Mid&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Cap&lt;/span&gt; &lt;span class="n"&gt;Equity&lt;/span&gt;
&lt;span class="n"&gt;SLXX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="n"&gt;ISHSIII&lt;/span&gt; &lt;span class="n"&gt;IBX&lt;/span&gt; &lt;span class="err"&gt;£&lt;/span&gt;&lt;span class="n"&gt;CB&lt;/span&gt;         &lt;span class="n"&gt;GBP&lt;/span&gt; &lt;span class="n"&gt;Corporate&lt;/span&gt; &lt;span class="n"&gt;Bond&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Out of these I hand picked IGLS.L and MIDD.L for a conservative 80% bonds and 20% equity portfolio. This plot below shows the annualised return versus risk of ISF (FTSE100), an equal-weighted portfolio of the pre-screened 20 ETFs, and this final portfolio of two ETFs. Notice the historic risk of this final portfolio is a third of FTSE100.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Return vs risk" src="http://www.quantisan.com/images/2013/london_etf_rr.png" /&gt;&lt;/p&gt;
&lt;p&gt;Not surprisingly, what my program derived from scratch is similar to the commonly suggested portfolio balance of bonds, local equities, and emerging market blend. What this program offers is picking out the specific ETFs from the hundreds of ETFs traded on London Stock Exchange for a balanced asset allocation.&lt;/p&gt;
&lt;p&gt;The complete R source code for this project is &lt;a href="https://github.com/Quantisan/touzi"&gt;available on Github&lt;/a&gt;.&lt;/p&gt;</summary><category term="London"></category><category term="ETF"></category><category term="R"></category></entry></feed>